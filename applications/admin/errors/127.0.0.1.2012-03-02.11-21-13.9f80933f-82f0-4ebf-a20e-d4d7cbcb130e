(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):            \n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if request.vars.revert and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.startswith(plugin_name):\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))            \n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n                \n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method)\n\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = gluon.tools.fetch(\'http://twitter.com/%s?format=json\'%TWITTER_HASH)\n            return sj.loads(page)[\'#timeline\']\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False            \n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\nresponse._vars=response._caller(check_version)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.TypeError object>'
p22
sS'args'
p23
S"('not all arguments converted during string formatting',)"
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.TypeError object>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p28
sS'__format__'
p29
S'<built-in method __format__ of exceptions.TypeError object>'
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p32
sS'__class__'
p33
S"<type 'exceptions.TypeError'>"
p34
sS'__unicode__'
p35
S'<built-in method __unicode__ of exceptions.TypeError object>'
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p38
sS'__subclasshook__'
p39
S'<built-in method __subclasshook__ of type object>'
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p46
sS'__doc__'
p47
S"'Inappropriate argument type.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S'not all arguments converted during string formatting'
p54
sS'request'
p55
ccopy_reg
_reconstructor
p56
(cgluon.html
BEAUTIFY
p57
c__builtin__
object
p58
NtRp59
(dp60
S'attributes'
p61
(dp62
sS'components'
p63
(lp64
g56
(cgluon.html
TABLE
p65
g58
NtRp66
(dp67
g61
(dp68
S'level'
p69
I5
ssS'parent'
p70
Nsg63
(lp71
g56
(cgluon.html
TR
p72
g58
NtRp73
(dp74
g61
(dp75
sg70
g66
sg63
(lp76
g56
(cgluon.html
TD
p77
g58
NtRp78
(dp79
g61
(dp80
S'_style'
p81
S'font-weight:bold;'
p82
ssg70
g73
sg63
(lp83
S'ajax'
p84
asbag56
(g77
g58
NtRp85
(dp86
g61
(dp87
S'_valign'
p88
S'top'
p89
ssg70
g73
sg63
(lp90
S':'
asbag56
(g77
g58
NtRp91
(dp92
g61
(dp93
sg70
g73
sg63
(lp94
g56
(g57
g58
NtRp95
(dp96
g61
(dp97
g69
I5
ssg70
g91
sg63
(lp98
S'True'
p99
asbasbasbag56
(g72
g58
NtRp100
(dp101
g61
(dp102
sg70
g66
sg63
(lp103
g56
(g77
g58
NtRp104
(dp105
g61
(dp106
g81
g82
ssg70
g100
sg63
(lp107
S'application'
p108
asbag56
(g77
g58
NtRp109
(dp110
g61
(dp111
g88
g89
ssg70
g100
sg63
(lp112
S':'
asbag56
(g77
g58
NtRp113
(dp114
g61
(dp115
sg70
g100
sg63
(lp116
g56
(g57
g58
NtRp117
(dp118
g61
(dp119
g69
I5
ssg70
g113
sg63
(lp120
S'admin'
p121
asbasbasbag56
(g72
g58
NtRp122
(dp123
g61
(dp124
sg70
g66
sg63
(lp125
g56
(g77
g58
NtRp126
(dp127
g61
(dp128
g81
g82
ssg70
g122
sg63
(lp129
g23
asbag56
(g77
g58
NtRp130
(dp131
g61
(dp132
g88
g89
ssg70
g122
sg63
(lp133
S':'
asbag56
(g77
g58
NtRp134
(dp135
g61
(dp136
sg70
g122
sg63
(lp137
g56
(g57
g58
NtRp138
(dp139
g61
(dp140
g69
I5
ssg70
g134
sg63
(lp141
g56
(g65
g58
NtRp142
(dp143
g61
(dp144
g69
I4
ssg70
Nsg63
(lp145
sbasbasbasbag56
(g72
g58
NtRp146
(dp147
g61
(dp148
sg70
g66
sg63
(lp149
g56
(g77
g58
NtRp150
(dp151
g61
(dp152
g81
g82
ssg70
g146
sg63
(lp153
S'body'
p154
asbag56
(g77
g58
NtRp155
(dp156
g61
(dp157
g88
g89
ssg70
g146
sg63
(lp158
S':'
asbag56
(g77
g58
NtRp159
(dp160
g61
(dp161
sg70
g146
sg63
(lp162
g56
(g57
g58
NtRp163
(dp164
g61
(dp165
g69
I5
ssg70
g159
sg63
(lp166
S"<open file '<fdopen>', mode 'w+b' at 0x336ec00>"
p167
asbasbasbag56
(g72
g58
NtRp168
(dp169
g61
(dp170
sg70
g66
sg63
(lp171
g56
(g77
g58
NtRp172
(dp173
g61
(dp174
g81
g82
ssg70
g168
sg63
(lp175
S'client'
p176
asbag56
(g77
g58
NtRp177
(dp178
g61
(dp179
g88
g89
ssg70
g168
sg63
(lp180
S':'
asbag56
(g77
g58
NtRp181
(dp182
g61
(dp183
sg70
g168
sg63
(lp184
g56
(g57
g58
NtRp185
(dp186
g61
(dp187
g69
I5
ssg70
g181
sg63
(lp188
S'127.0.0.1'
p189
asbasbasbag56
(g72
g58
NtRp190
(dp191
g61
(dp192
sg70
g66
sg63
(lp193
g56
(g77
g58
NtRp194
(dp195
g61
(dp196
g81
g82
ssg70
g190
sg63
(lp197
S'controller'
p198
asbag56
(g77
g58
NtRp199
(dp200
g61
(dp201
g88
g89
ssg70
g190
sg63
(lp202
S':'
asbag56
(g77
g58
NtRp203
(dp204
g61
(dp205
sg70
g190
sg63
(lp206
g56
(g57
g58
NtRp207
(dp208
g61
(dp209
g69
I5
ssg70
g203
sg63
(lp210
S'default'
p211
asbasbasbag56
(g72
g58
NtRp212
(dp213
g61
(dp214
sg70
g66
sg63
(lp215
g56
(g77
g58
NtRp216
(dp217
g61
(dp218
g81
g82
ssg70
g212
sg63
(lp219
S'cookies'
p220
asbag56
(g77
g58
NtRp221
(dp222
g61
(dp223
g88
g89
ssg70
g212
sg63
(lp224
S':'
asbag56
(g77
g58
NtRp225
(dp226
g61
(dp227
sg70
g212
sg63
(lp228
g56
(g57
g58
NtRp229
(dp230
g61
(dp231
g69
I5
ssg70
g225
sg63
(lp232
g56
(g65
g58
NtRp233
(dp234
g61
(dp235
g69
I4
ssg70
Nsg63
(lp236
g56
(g72
g58
NtRp237
(dp238
g61
(dp239
sg70
g233
sg63
(lp240
g56
(g77
g58
NtRp241
(dp242
g61
(dp243
g81
g82
ssg70
g237
sg63
(lp244
S'session_id_admin'
p245
asbag56
(g77
g58
NtRp246
(dp247
g61
(dp248
g88
g89
ssg70
g237
sg63
(lp249
S':'
asbag56
(g77
g58
NtRp250
(dp251
g61
(dp252
sg70
g237
sg63
(lp253
g56
(g57
g58
NtRp254
(dp255
g61
(dp256
g69
I4
ssg70
g250
sg63
(lp257
g56
(g65
g58
NtRp258
(dp259
g61
(dp260
g69
I3
ssg70
Nsg63
(lp261
g56
(g72
g58
NtRp262
(dp263
g61
(dp264
sg70
g258
sg63
(lp265
g56
(g77
g58
NtRp266
(dp267
g61
(dp268
g81
g82
ssg70
g262
sg63
(lp269
S'comment'
p270
asbag56
(g77
g58
NtRp271
(dp272
g61
(dp273
g88
g89
ssg70
g262
sg63
(lp274
S':'
asbag56
(g77
g58
NtRp275
(dp276
g61
(dp277
sg70
g262
sg63
(lp278
g56
(g57
g58
NtRp279
(dp280
g61
(dp281
g69
I3
ssg70
g275
sg63
(lp282
S''
asbasbasbag56
(g72
g58
NtRp283
(dp284
g61
(dp285
sg70
g258
sg63
(lp286
g56
(g77
g58
NtRp287
(dp288
g61
(dp289
g81
g82
ssg70
g283
sg63
(lp290
S'domain'
p291
asbag56
(g77
g58
NtRp292
(dp293
g61
(dp294
g88
g89
ssg70
g283
sg63
(lp295
S':'
asbag56
(g77
g58
NtRp296
(dp297
g61
(dp298
sg70
g283
sg63
(lp299
g56
(g57
g58
NtRp300
(dp301
g61
(dp302
g69
I3
ssg70
g296
sg63
(lp303
S''
asbasbasbag56
(g72
g58
NtRp304
(dp305
g61
(dp306
sg70
g258
sg63
(lp307
g56
(g77
g58
NtRp308
(dp309
g61
(dp310
g81
g82
ssg70
g304
sg63
(lp311
S'expires'
p312
asbag56
(g77
g58
NtRp313
(dp314
g61
(dp315
g88
g89
ssg70
g304
sg63
(lp316
S':'
asbag56
(g77
g58
NtRp317
(dp318
g61
(dp319
sg70
g304
sg63
(lp320
g56
(g57
g58
NtRp321
(dp322
g61
(dp323
g69
I3
ssg70
g317
sg63
(lp324
S''
asbasbasbag56
(g72
g58
NtRp325
(dp326
g61
(dp327
sg70
g258
sg63
(lp328
g56
(g77
g58
NtRp329
(dp330
g61
(dp331
g81
g82
ssg70
g325
sg63
(lp332
S'httponly'
p333
asbag56
(g77
g58
NtRp334
(dp335
g61
(dp336
g88
g89
ssg70
g325
sg63
(lp337
S':'
asbag56
(g77
g58
NtRp338
(dp339
g61
(dp340
sg70
g325
sg63
(lp341
g56
(g57
g58
NtRp342
(dp343
g61
(dp344
g69
I3
ssg70
g338
sg63
(lp345
S''
asbasbasbag56
(g72
g58
NtRp346
(dp347
g61
(dp348
sg70
g258
sg63
(lp349
g56
(g77
g58
NtRp350
(dp351
g61
(dp352
g81
g82
ssg70
g346
sg63
(lp353
S'max-age'
p354
asbag56
(g77
g58
NtRp355
(dp356
g61
(dp357
g88
g89
ssg70
g346
sg63
(lp358
S':'
asbag56
(g77
g58
NtRp359
(dp360
g61
(dp361
sg70
g346
sg63
(lp362
g56
(g57
g58
NtRp363
(dp364
g61
(dp365
g69
I3
ssg70
g359
sg63
(lp366
S''
asbasbasbag56
(g72
g58
NtRp367
(dp368
g61
(dp369
sg70
g258
sg63
(lp370
g56
(g77
g58
NtRp371
(dp372
g61
(dp373
g81
g82
ssg70
g367
sg63
(lp374
S'path'
p375
asbag56
(g77
g58
NtRp376
(dp377
g61
(dp378
g88
g89
ssg70
g367
sg63
(lp379
S':'
asbag56
(g77
g58
NtRp380
(dp381
g61
(dp382
sg70
g367
sg63
(lp383
g56
(g57
g58
NtRp384
(dp385
g61
(dp386
g69
I3
ssg70
g380
sg63
(lp387
S''
asbasbasbag56
(g72
g58
NtRp388
(dp389
g61
(dp390
sg70
g258
sg63
(lp391
g56
(g77
g58
NtRp392
(dp393
g61
(dp394
g81
g82
ssg70
g388
sg63
(lp395
S'secure'
p396
asbag56
(g77
g58
NtRp397
(dp398
g61
(dp399
g88
g89
ssg70
g388
sg63
(lp400
S':'
asbag56
(g77
g58
NtRp401
(dp402
g61
(dp403
sg70
g388
sg63
(lp404
g56
(g57
g58
NtRp405
(dp406
g61
(dp407
g69
I3
ssg70
g401
sg63
(lp408
S''
asbasbasbag56
(g72
g58
NtRp409
(dp410
g61
(dp411
sg70
g258
sg63
(lp412
g56
(g77
g58
NtRp413
(dp414
g61
(dp415
g81
g82
ssg70
g409
sg63
(lp416
S'version'
p417
asbag56
(g77
g58
NtRp418
(dp419
g61
(dp420
g88
g89
ssg70
g409
sg63
(lp421
S':'
asbag56
(g77
g58
NtRp422
(dp423
g61
(dp424
sg70
g409
sg63
(lp425
g56
(g57
g58
NtRp426
(dp427
g61
(dp428
g69
I3
ssg70
g422
sg63
(lp429
S''
asbasbasbasbasbasbasbag56
(g72
g58
NtRp430
(dp431
g61
(dp432
sg70
g233
sg63
(lp433
g56
(g77
g58
NtRp434
(dp435
g61
(dp436
g81
g82
ssg70
g430
sg63
(lp437
S'session_id_welcome'
p438
asbag56
(g77
g58
NtRp439
(dp440
g61
(dp441
g88
g89
ssg70
g430
sg63
(lp442
S':'
asbag56
(g77
g58
NtRp443
(dp444
g61
(dp445
sg70
g430
sg63
(lp446
g56
(g57
g58
NtRp447
(dp448
g61
(dp449
g69
I4
ssg70
g443
sg63
(lp450
g56
(g65
g58
NtRp451
(dp452
g61
(dp453
g69
I3
ssg70
Nsg63
(lp454
g56
(g72
g58
NtRp455
(dp456
g61
(dp457
sg70
g451
sg63
(lp458
g56
(g77
g58
NtRp459
(dp460
g61
(dp461
g81
g82
ssg70
g455
sg63
(lp462
g270
asbag56
(g77
g58
NtRp463
(dp464
g61
(dp465
g88
g89
ssg70
g455
sg63
(lp466
S':'
asbag56
(g77
g58
NtRp467
(dp468
g61
(dp469
sg70
g455
sg63
(lp470
g56
(g57
g58
NtRp471
(dp472
g61
(dp473
g69
I3
ssg70
g467
sg63
(lp474
S''
asbasbasbag56
(g72
g58
NtRp475
(dp476
g61
(dp477
sg70
g451
sg63
(lp478
g56
(g77
g58
NtRp479
(dp480
g61
(dp481
g81
g82
ssg70
g475
sg63
(lp482
g291
asbag56
(g77
g58
NtRp483
(dp484
g61
(dp485
g88
g89
ssg70
g475
sg63
(lp486
S':'
asbag56
(g77
g58
NtRp487
(dp488
g61
(dp489
sg70
g475
sg63
(lp490
g56
(g57
g58
NtRp491
(dp492
g61
(dp493
g69
I3
ssg70
g487
sg63
(lp494
S''
asbasbasbag56
(g72
g58
NtRp495
(dp496
g61
(dp497
sg70
g451
sg63
(lp498
g56
(g77
g58
NtRp499
(dp500
g61
(dp501
g81
g82
ssg70
g495
sg63
(lp502
g312
asbag56
(g77
g58
NtRp503
(dp504
g61
(dp505
g88
g89
ssg70
g495
sg63
(lp506
S':'
asbag56
(g77
g58
NtRp507
(dp508
g61
(dp509
sg70
g495
sg63
(lp510
g56
(g57
g58
NtRp511
(dp512
g61
(dp513
g69
I3
ssg70
g507
sg63
(lp514
S''
asbasbasbag56
(g72
g58
NtRp515
(dp516
g61
(dp517
sg70
g451
sg63
(lp518
g56
(g77
g58
NtRp519
(dp520
g61
(dp521
g81
g82
ssg70
g515
sg63
(lp522
g333
asbag56
(g77
g58
NtRp523
(dp524
g61
(dp525
g88
g89
ssg70
g515
sg63
(lp526
S':'
asbag56
(g77
g58
NtRp527
(dp528
g61
(dp529
sg70
g515
sg63
(lp530
g56
(g57
g58
NtRp531
(dp532
g61
(dp533
g69
I3
ssg70
g527
sg63
(lp534
S''
asbasbasbag56
(g72
g58
NtRp535
(dp536
g61
(dp537
sg70
g451
sg63
(lp538
g56
(g77
g58
NtRp539
(dp540
g61
(dp541
g81
g82
ssg70
g535
sg63
(lp542
g354
asbag56
(g77
g58
NtRp543
(dp544
g61
(dp545
g88
g89
ssg70
g535
sg63
(lp546
S':'
asbag56
(g77
g58
NtRp547
(dp548
g61
(dp549
sg70
g535
sg63
(lp550
g56
(g57
g58
NtRp551
(dp552
g61
(dp553
g69
I3
ssg70
g547
sg63
(lp554
S''
asbasbasbag56
(g72
g58
NtRp555
(dp556
g61
(dp557
sg70
g451
sg63
(lp558
g56
(g77
g58
NtRp559
(dp560
g61
(dp561
g81
g82
ssg70
g555
sg63
(lp562
g375
asbag56
(g77
g58
NtRp563
(dp564
g61
(dp565
g88
g89
ssg70
g555
sg63
(lp566
S':'
asbag56
(g77
g58
NtRp567
(dp568
g61
(dp569
sg70
g555
sg63
(lp570
g56
(g57
g58
NtRp571
(dp572
g61
(dp573
g69
I3
ssg70
g567
sg63
(lp574
S''
asbasbasbag56
(g72
g58
NtRp575
(dp576
g61
(dp577
sg70
g451
sg63
(lp578
g56
(g77
g58
NtRp579
(dp580
g61
(dp581
g81
g82
ssg70
g575
sg63
(lp582
g396
asbag56
(g77
g58
NtRp583
(dp584
g61
(dp585
g88
g89
ssg70
g575
sg63
(lp586
S':'
asbag56
(g77
g58
NtRp587
(dp588
g61
(dp589
sg70
g575
sg63
(lp590
g56
(g57
g58
NtRp591
(dp592
g61
(dp593
g69
I3
ssg70
g587
sg63
(lp594
S''
asbasbasbag56
(g72
g58
NtRp595
(dp596
g61
(dp597
sg70
g451
sg63
(lp598
g56
(g77
g58
NtRp599
(dp600
g61
(dp601
g81
g82
ssg70
g595
sg63
(lp602
g417
asbag56
(g77
g58
NtRp603
(dp604
g61
(dp605
g88
g89
ssg70
g595
sg63
(lp606
S':'
asbag56
(g77
g58
NtRp607
(dp608
g61
(dp609
sg70
g595
sg63
(lp610
g56
(g57
g58
NtRp611
(dp612
g61
(dp613
g69
I3
ssg70
g607
sg63
(lp614
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp615
(dp616
g61
(dp617
sg70
g66
sg63
(lp618
g56
(g77
g58
NtRp619
(dp620
g61
(dp621
g81
g82
ssg70
g615
sg63
(lp622
S'env'
p623
asbag56
(g77
g58
NtRp624
(dp625
g61
(dp626
g88
g89
ssg70
g615
sg63
(lp627
S':'
asbag56
(g77
g58
NtRp628
(dp629
g61
(dp630
sg70
g615
sg63
(lp631
g56
(g57
g58
NtRp632
(dp633
g61
(dp634
g69
I5
ssg70
g628
sg63
(lp635
g56
(g65
g58
NtRp636
(dp637
g61
(dp638
g69
I4
ssg70
Nsg63
(lp639
g56
(g72
g58
NtRp640
(dp641
g61
(dp642
sg70
g636
sg63
(lp643
g56
(g77
g58
NtRp644
(dp645
g61
(dp646
g81
g82
ssg70
g640
sg63
(lp647
S'app_folders'
p648
asbag56
(g77
g58
NtRp649
(dp650
g61
(dp651
g88
g89
ssg70
g640
sg63
(lp652
S':'
asbag56
(g77
g58
NtRp653
(dp654
g61
(dp655
sg70
g640
sg63
(lp656
g56
(g57
g58
NtRp657
(dp658
g61
(dp659
g69
I4
ssg70
g653
sg63
(lp660
S"set(['/home/jogi/Programmieren/web2py/applications/welcome/', '/home/jogi/Programmieren/web2py/applications/admin/'])"
p661
asbasbasbag56
(g72
g58
NtRp662
(dp663
g61
(dp664
sg70
g636
sg63
(lp665
g56
(g77
g58
NtRp666
(dp667
g61
(dp668
g81
g82
ssg70
g662
sg63
(lp669
S'applications_parent'
p670
asbag56
(g77
g58
NtRp671
(dp672
g61
(dp673
g88
g89
ssg70
g662
sg63
(lp674
S':'
asbag56
(g77
g58
NtRp675
(dp676
g61
(dp677
sg70
g662
sg63
(lp678
g56
(g57
g58
NtRp679
(dp680
g61
(dp681
g69
I4
ssg70
g675
sg63
(lp682
S'/home/jogi/Programmieren/web2py'
p683
asbasbasbag56
(g72
g58
NtRp684
(dp685
g61
(dp686
sg70
g636
sg63
(lp687
g56
(g77
g58
NtRp688
(dp689
g61
(dp690
g81
g82
ssg70
g684
sg63
(lp691
S'cmd_args'
p692
asbag56
(g77
g58
NtRp693
(dp694
g61
(dp695
g88
g89
ssg70
g684
sg63
(lp696
S':'
asbag56
(g77
g58
NtRp697
(dp698
g61
(dp699
sg70
g684
sg63
(lp700
g56
(g57
g58
NtRp701
(dp702
g61
(dp703
g69
I4
ssg70
g697
sg63
(lp704
g56
(g65
g58
NtRp705
(dp706
g61
(dp707
g69
I3
ssg70
Nsg63
(lp708
sbasbasbasbag56
(g72
g58
NtRp709
(dp710
g61
(dp711
sg70
g636
sg63
(lp712
g56
(g77
g58
NtRp713
(dp714
g61
(dp715
g81
g82
ssg70
g709
sg63
(lp716
S'cmd_options'
p717
asbag56
(g77
g58
NtRp718
(dp719
g61
(dp720
g88
g89
ssg70
g709
sg63
(lp721
S':'
asbag56
(g77
g58
NtRp722
(dp723
g61
(dp724
sg70
g709
sg63
(lp725
g56
(g57
g58
NtRp726
(dp727
g61
(dp728
g69
I4
ssg70
g722
sg63
(lp729
S"<Values at 0x2dbb908: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'JogiNetU', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/home/jogi/Programmieren/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p730
asbasbasbag56
(g72
g58
NtRp731
(dp732
g61
(dp733
sg70
g636
sg63
(lp734
g56
(g77
g58
NtRp735
(dp736
g61
(dp737
g81
g82
ssg70
g731
sg63
(lp738
S'content_length'
p739
asbag56
(g77
g58
NtRp740
(dp741
g61
(dp742
g88
g89
ssg70
g731
sg63
(lp743
S':'
asbag56
(g77
g58
NtRp744
(dp745
g61
(dp746
sg70
g731
sg63
(lp747
g56
(g57
g58
NtRp748
(dp749
g61
(dp750
g69
I4
ssg70
g744
sg63
(lp751
S'0'
asbasbasbag56
(g72
g58
NtRp752
(dp753
g61
(dp754
sg70
g636
sg63
(lp755
g56
(g77
g58
NtRp756
(dp757
g61
(dp758
g81
g82
ssg70
g752
sg63
(lp759
S'db_sessions'
p760
asbag56
(g77
g58
NtRp761
(dp762
g61
(dp763
g88
g89
ssg70
g752
sg63
(lp764
S':'
asbag56
(g77
g58
NtRp765
(dp766
g61
(dp767
sg70
g752
sg63
(lp768
g56
(g57
g58
NtRp769
(dp770
g61
(dp771
g69
I4
ssg70
g765
sg63
(lp772
S'set([])'
p773
asbasbasbag56
(g72
g58
NtRp774
(dp775
g61
(dp776
sg70
g636
sg63
(lp777
g56
(g77
g58
NtRp778
(dp779
g61
(dp780
g81
g82
ssg70
g774
sg63
(lp781
S'debugging'
p782
asbag56
(g77
g58
NtRp783
(dp784
g61
(dp785
g88
g89
ssg70
g774
sg63
(lp786
S':'
asbag56
(g77
g58
NtRp787
(dp788
g61
(dp789
sg70
g774
sg63
(lp790
g56
(g57
g58
NtRp791
(dp792
g61
(dp793
g69
I4
ssg70
g787
sg63
(lp794
S'False'
p795
asbasbasbag56
(g72
g58
NtRp796
(dp797
g61
(dp798
sg70
g636
sg63
(lp799
g56
(g77
g58
NtRp800
(dp801
g61
(dp802
g81
g82
ssg70
g796
sg63
(lp803
S'gluon_parent'
p804
asbag56
(g77
g58
NtRp805
(dp806
g61
(dp807
g88
g89
ssg70
g796
sg63
(lp808
S':'
asbag56
(g77
g58
NtRp809
(dp810
g61
(dp811
sg70
g796
sg63
(lp812
g56
(g57
g58
NtRp813
(dp814
g61
(dp815
g69
I4
ssg70
g809
sg63
(lp816
S'/home/jogi/Programmieren/web2py'
p817
asbasbasbag56
(g72
g58
NtRp818
(dp819
g61
(dp820
sg70
g636
sg63
(lp821
g56
(g77
g58
NtRp822
(dp823
g61
(dp824
g81
g82
ssg70
g818
sg63
(lp825
S'http_accept'
p826
asbag56
(g77
g58
NtRp827
(dp828
g61
(dp829
g88
g89
ssg70
g818
sg63
(lp830
S':'
asbag56
(g77
g58
NtRp831
(dp832
g61
(dp833
sg70
g818
sg63
(lp834
g56
(g57
g58
NtRp835
(dp836
g61
(dp837
g69
I4
ssg70
g831
sg63
(lp838
S'*/*'
p839
asbasbasbag56
(g72
g58
NtRp840
(dp841
g61
(dp842
sg70
g636
sg63
(lp843
g56
(g77
g58
NtRp844
(dp845
g61
(dp846
g81
g82
ssg70
g840
sg63
(lp847
S'http_accept_encoding'
p848
asbag56
(g77
g58
NtRp849
(dp850
g61
(dp851
g88
g89
ssg70
g840
sg63
(lp852
S':'
asbag56
(g77
g58
NtRp853
(dp854
g61
(dp855
sg70
g840
sg63
(lp856
g56
(g57
g58
NtRp857
(dp858
g61
(dp859
g69
I4
ssg70
g853
sg63
(lp860
S'gzip, deflate'
p861
asbasbasbag56
(g72
g58
NtRp862
(dp863
g61
(dp864
sg70
g636
sg63
(lp865
g56
(g77
g58
NtRp866
(dp867
g61
(dp868
g81
g82
ssg70
g862
sg63
(lp869
S'http_accept_language'
p870
asbag56
(g77
g58
NtRp871
(dp872
g61
(dp873
g88
g89
ssg70
g862
sg63
(lp874
S':'
asbag56
(g77
g58
NtRp875
(dp876
g61
(dp877
sg70
g862
sg63
(lp878
g56
(g57
g58
NtRp879
(dp880
g61
(dp881
g69
I4
ssg70
g875
sg63
(lp882
S'de-de,de;q=0.8,en-us;q=0.5,en;q=0.3'
p883
asbasbasbag56
(g72
g58
NtRp884
(dp885
g61
(dp886
sg70
g636
sg63
(lp887
g56
(g77
g58
NtRp888
(dp889
g61
(dp890
g81
g82
ssg70
g884
sg63
(lp891
S'http_cache_control'
p892
asbag56
(g77
g58
NtRp893
(dp894
g61
(dp895
g88
g89
ssg70
g884
sg63
(lp896
S':'
asbag56
(g77
g58
NtRp897
(dp898
g61
(dp899
sg70
g884
sg63
(lp900
g56
(g57
g58
NtRp901
(dp902
g61
(dp903
g69
I4
ssg70
g897
sg63
(lp904
S'no-cache'
p905
asbasbasbag56
(g72
g58
NtRp906
(dp907
g61
(dp908
sg70
g636
sg63
(lp909
g56
(g77
g58
NtRp910
(dp911
g61
(dp912
g81
g82
ssg70
g906
sg63
(lp913
S'http_connection'
p914
asbag56
(g77
g58
NtRp915
(dp916
g61
(dp917
g88
g89
ssg70
g906
sg63
(lp918
S':'
asbag56
(g77
g58
NtRp919
(dp920
g61
(dp921
sg70
g906
sg63
(lp922
g56
(g57
g58
NtRp923
(dp924
g61
(dp925
g69
I4
ssg70
g919
sg63
(lp926
S'keep-alive'
p927
asbasbasbag56
(g72
g58
NtRp928
(dp929
g61
(dp930
sg70
g636
sg63
(lp931
g56
(g77
g58
NtRp932
(dp933
g61
(dp934
g81
g82
ssg70
g928
sg63
(lp935
S'http_content_length'
p936
asbag56
(g77
g58
NtRp937
(dp938
g61
(dp939
g88
g89
ssg70
g928
sg63
(lp940
S':'
asbag56
(g77
g58
NtRp941
(dp942
g61
(dp943
sg70
g928
sg63
(lp944
g56
(g57
g58
NtRp945
(dp946
g61
(dp947
g69
I4
ssg70
g941
sg63
(lp948
S'0'
asbasbasbag56
(g72
g58
NtRp949
(dp950
g61
(dp951
sg70
g636
sg63
(lp952
g56
(g77
g58
NtRp953
(dp954
g61
(dp955
g81
g82
ssg70
g949
sg63
(lp956
S'http_cookie'
p957
asbag56
(g77
g58
NtRp958
(dp959
g61
(dp960
g88
g89
ssg70
g949
sg63
(lp961
S':'
asbag56
(g77
g58
NtRp962
(dp963
g61
(dp964
sg70
g949
sg63
(lp965
g56
(g57
g58
NtRp966
(dp967
g61
(dp968
g69
I4
ssg70
g962
sg63
(lp969
S'session_id_welcome=127.0.0.1-dd81f2ff-0309-4632-b785-81e36b678dae; session_id_admin=127.0.0.1-86d5f51f-3a26-44b8-a9e1-2cbc04eace59'
p970
asbasbasbag56
(g72
g58
NtRp971
(dp972
g61
(dp973
sg70
g636
sg63
(lp974
g56
(g77
g58
NtRp975
(dp976
g61
(dp977
g81
g82
ssg70
g971
sg63
(lp978
S'http_dnt'
p979
asbag56
(g77
g58
NtRp980
(dp981
g61
(dp982
g88
g89
ssg70
g971
sg63
(lp983
S':'
asbag56
(g77
g58
NtRp984
(dp985
g61
(dp986
sg70
g971
sg63
(lp987
g56
(g57
g58
NtRp988
(dp989
g61
(dp990
g69
I4
ssg70
g984
sg63
(lp991
S'1'
asbasbasbag56
(g72
g58
NtRp992
(dp993
g61
(dp994
sg70
g636
sg63
(lp995
g56
(g77
g58
NtRp996
(dp997
g61
(dp998
g81
g82
ssg70
g992
sg63
(lp999
S'http_host'
p1000
asbag56
(g77
g58
NtRp1001
(dp1002
g61
(dp1003
g88
g89
ssg70
g992
sg63
(lp1004
S':'
asbag56
(g77
g58
NtRp1005
(dp1006
g61
(dp1007
sg70
g992
sg63
(lp1008
g56
(g57
g58
NtRp1009
(dp1010
g61
(dp1011
g69
I4
ssg70
g1005
sg63
(lp1012
S'127.0.0.1:8000'
p1013
asbasbasbag56
(g72
g58
NtRp1014
(dp1015
g61
(dp1016
sg70
g636
sg63
(lp1017
g56
(g77
g58
NtRp1018
(dp1019
g61
(dp1020
g81
g82
ssg70
g1014
sg63
(lp1021
S'http_pragma'
p1022
asbag56
(g77
g58
NtRp1023
(dp1024
g61
(dp1025
g88
g89
ssg70
g1014
sg63
(lp1026
S':'
asbag56
(g77
g58
NtRp1027
(dp1028
g61
(dp1029
sg70
g1014
sg63
(lp1030
g56
(g57
g58
NtRp1031
(dp1032
g61
(dp1033
g69
I4
ssg70
g1027
sg63
(lp1034
S'no-cache'
p1035
asbasbasbag56
(g72
g58
NtRp1036
(dp1037
g61
(dp1038
sg70
g636
sg63
(lp1039
g56
(g77
g58
NtRp1040
(dp1041
g61
(dp1042
g81
g82
ssg70
g1036
sg63
(lp1043
S'http_referer'
p1044
asbag56
(g77
g58
NtRp1045
(dp1046
g61
(dp1047
g88
g89
ssg70
g1036
sg63
(lp1048
S':'
asbag56
(g77
g58
NtRp1049
(dp1050
g61
(dp1051
sg70
g1036
sg63
(lp1052
g56
(g57
g58
NtRp1053
(dp1054
g61
(dp1055
g69
I4
ssg70
g1049
sg63
(lp1056
S'http://127.0.0.1:8000/admin/default/site'
p1057
asbasbasbag56
(g72
g58
NtRp1058
(dp1059
g61
(dp1060
sg70
g636
sg63
(lp1061
g56
(g77
g58
NtRp1062
(dp1063
g61
(dp1064
g81
g82
ssg70
g1058
sg63
(lp1065
S'http_user_agent'
p1066
asbag56
(g77
g58
NtRp1067
(dp1068
g61
(dp1069
g88
g89
ssg70
g1058
sg63
(lp1070
S':'
asbag56
(g77
g58
NtRp1071
(dp1072
g61
(dp1073
sg70
g1058
sg63
(lp1074
g56
(g57
g58
NtRp1075
(dp1076
g61
(dp1077
g69
I4
ssg70
g1071
sg63
(lp1078
S'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:10.0.2) Gecko/20100101 Firefox/10.0.2'
p1079
asbasbasbag56
(g72
g58
NtRp1080
(dp1081
g61
(dp1082
sg70
g636
sg63
(lp1083
g56
(g77
g58
NtRp1084
(dp1085
g61
(dp1086
g81
g82
ssg70
g1080
sg63
(lp1087
S'http_x_requested_with'
p1088
asbag56
(g77
g58
NtRp1089
(dp1090
g61
(dp1091
g88
g89
ssg70
g1080
sg63
(lp1092
S':'
asbag56
(g77
g58
NtRp1093
(dp1094
g61
(dp1095
sg70
g1080
sg63
(lp1096
g56
(g57
g58
NtRp1097
(dp1098
g61
(dp1099
g69
I4
ssg70
g1093
sg63
(lp1100
S'XMLHttpRequest'
p1101
asbasbasbag56
(g72
g58
NtRp1102
(dp1103
g61
(dp1104
sg70
g636
sg63
(lp1105
g56
(g77
g58
NtRp1106
(dp1107
g61
(dp1108
g81
g82
ssg70
g1102
sg63
(lp1109
S'is_jython'
p1110
asbag56
(g77
g58
NtRp1111
(dp1112
g61
(dp1113
g88
g89
ssg70
g1102
sg63
(lp1114
S':'
asbag56
(g77
g58
NtRp1115
(dp1116
g61
(dp1117
sg70
g1102
sg63
(lp1118
g56
(g57
g58
NtRp1119
(dp1120
g61
(dp1121
g69
I4
ssg70
g1115
sg63
(lp1122
g795
asbasbasbag56
(g72
g58
NtRp1123
(dp1124
g61
(dp1125
sg70
g636
sg63
(lp1126
g56
(g77
g58
NtRp1127
(dp1128
g61
(dp1129
g81
g82
ssg70
g1123
sg63
(lp1130
S'path_info'
p1131
asbag56
(g77
g58
NtRp1132
(dp1133
g61
(dp1134
g88
g89
ssg70
g1123
sg63
(lp1135
S':'
asbag56
(g77
g58
NtRp1136
(dp1137
g61
(dp1138
sg70
g1123
sg63
(lp1139
g56
(g57
g58
NtRp1140
(dp1141
g61
(dp1142
g69
I4
ssg70
g1136
sg63
(lp1143
S'/admin/default/check_version'
p1144
asbasbasbag56
(g72
g58
NtRp1145
(dp1146
g61
(dp1147
sg70
g636
sg63
(lp1148
g56
(g77
g58
NtRp1149
(dp1150
g61
(dp1151
g81
g82
ssg70
g1145
sg63
(lp1152
S'query_string'
p1153
asbag56
(g77
g58
NtRp1154
(dp1155
g61
(dp1156
g88
g89
ssg70
g1145
sg63
(lp1157
S':'
asbag56
(g77
g58
NtRp1158
(dp1159
g61
(dp1160
sg70
g1145
sg63
(lp1161
g56
(g57
g58
NtRp1162
(dp1163
g61
(dp1164
g69
I4
ssg70
g1158
sg63
(lp1165
S''
asbasbasbag56
(g72
g58
NtRp1166
(dp1167
g61
(dp1168
sg70
g636
sg63
(lp1169
g56
(g77
g58
NtRp1170
(dp1171
g61
(dp1172
g81
g82
ssg70
g1166
sg63
(lp1173
S'remote_addr'
p1174
asbag56
(g77
g58
NtRp1175
(dp1176
g61
(dp1177
g88
g89
ssg70
g1166
sg63
(lp1178
S':'
asbag56
(g77
g58
NtRp1179
(dp1180
g61
(dp1181
sg70
g1166
sg63
(lp1182
g56
(g57
g58
NtRp1183
(dp1184
g61
(dp1185
g69
I4
ssg70
g1179
sg63
(lp1186
g189
asbasbasbag56
(g72
g58
NtRp1187
(dp1188
g61
(dp1189
sg70
g636
sg63
(lp1190
g56
(g77
g58
NtRp1191
(dp1192
g61
(dp1193
g81
g82
ssg70
g1187
sg63
(lp1194
S'remote_port'
p1195
asbag56
(g77
g58
NtRp1196
(dp1197
g61
(dp1198
g88
g89
ssg70
g1187
sg63
(lp1199
S':'
asbag56
(g77
g58
NtRp1200
(dp1201
g61
(dp1202
sg70
g1187
sg63
(lp1203
g56
(g57
g58
NtRp1204
(dp1205
g61
(dp1206
g69
I4
ssg70
g1200
sg63
(lp1207
S'36984'
p1208
asbasbasbag56
(g72
g58
NtRp1209
(dp1210
g61
(dp1211
sg70
g636
sg63
(lp1212
g56
(g77
g58
NtRp1213
(dp1214
g61
(dp1215
g81
g82
ssg70
g1209
sg63
(lp1216
S'request_method'
p1217
asbag56
(g77
g58
NtRp1218
(dp1219
g61
(dp1220
g88
g89
ssg70
g1209
sg63
(lp1221
S':'
asbag56
(g77
g58
NtRp1222
(dp1223
g61
(dp1224
sg70
g1209
sg63
(lp1225
g56
(g57
g58
NtRp1226
(dp1227
g61
(dp1228
g69
I4
ssg70
g1222
sg63
(lp1229
S'POST'
p1230
asbasbasbag56
(g72
g58
NtRp1231
(dp1232
g61
(dp1233
sg70
g636
sg63
(lp1234
g56
(g77
g58
NtRp1235
(dp1236
g61
(dp1237
g81
g82
ssg70
g1231
sg63
(lp1238
S'script_name'
p1239
asbag56
(g77
g58
NtRp1240
(dp1241
g61
(dp1242
g88
g89
ssg70
g1231
sg63
(lp1243
S':'
asbag56
(g77
g58
NtRp1244
(dp1245
g61
(dp1246
sg70
g1231
sg63
(lp1247
g56
(g57
g58
NtRp1248
(dp1249
g61
(dp1250
g69
I4
ssg70
g1244
sg63
(lp1251
S''
asbasbasbag56
(g72
g58
NtRp1252
(dp1253
g61
(dp1254
sg70
g636
sg63
(lp1255
g56
(g77
g58
NtRp1256
(dp1257
g61
(dp1258
g81
g82
ssg70
g1252
sg63
(lp1259
S'server_name'
p1260
asbag56
(g77
g58
NtRp1261
(dp1262
g61
(dp1263
g88
g89
ssg70
g1252
sg63
(lp1264
S':'
asbag56
(g77
g58
NtRp1265
(dp1266
g61
(dp1267
sg70
g1252
sg63
(lp1268
g56
(g57
g58
NtRp1269
(dp1270
g61
(dp1271
g69
I4
ssg70
g1265
sg63
(lp1272
S'JogiNetU'
p1273
asbasbasbag56
(g72
g58
NtRp1274
(dp1275
g61
(dp1276
sg70
g636
sg63
(lp1277
g56
(g77
g58
NtRp1278
(dp1279
g61
(dp1280
g81
g82
ssg70
g1274
sg63
(lp1281
S'server_port'
p1282
asbag56
(g77
g58
NtRp1283
(dp1284
g61
(dp1285
g88
g89
ssg70
g1274
sg63
(lp1286
S':'
asbag56
(g77
g58
NtRp1287
(dp1288
g61
(dp1289
sg70
g1274
sg63
(lp1290
g56
(g57
g58
NtRp1291
(dp1292
g61
(dp1293
g69
I4
ssg70
g1287
sg63
(lp1294
S'8000'
p1295
asbasbasbag56
(g72
g58
NtRp1296
(dp1297
g61
(dp1298
sg70
g636
sg63
(lp1299
g56
(g77
g58
NtRp1300
(dp1301
g61
(dp1302
g81
g82
ssg70
g1296
sg63
(lp1303
S'server_protocol'
p1304
asbag56
(g77
g58
NtRp1305
(dp1306
g61
(dp1307
g88
g89
ssg70
g1296
sg63
(lp1308
S':'
asbag56
(g77
g58
NtRp1309
(dp1310
g61
(dp1311
sg70
g1296
sg63
(lp1312
g56
(g57
g58
NtRp1313
(dp1314
g61
(dp1315
g69
I4
ssg70
g1309
sg63
(lp1316
S'HTTP/1.1'
p1317
asbasbasbag56
(g72
g58
NtRp1318
(dp1319
g61
(dp1320
sg70
g636
sg63
(lp1321
g56
(g77
g58
NtRp1322
(dp1323
g61
(dp1324
g81
g82
ssg70
g1318
sg63
(lp1325
S'server_software'
p1326
asbag56
(g77
g58
NtRp1327
(dp1328
g61
(dp1329
g88
g89
ssg70
g1318
sg63
(lp1330
S':'
asbag56
(g77
g58
NtRp1331
(dp1332
g61
(dp1333
sg70
g1318
sg63
(lp1334
g56
(g57
g58
NtRp1335
(dp1336
g61
(dp1337
g69
I4
ssg70
g1331
sg63
(lp1338
S'Rocket 1.2.4'
p1339
asbasbasbag56
(g72
g58
NtRp1340
(dp1341
g61
(dp1342
sg70
g636
sg63
(lp1343
g56
(g77
g58
NtRp1344
(dp1345
g61
(dp1346
g81
g82
ssg70
g1340
sg63
(lp1347
S'web2py_crontype'
p1348
asbag56
(g77
g58
NtRp1349
(dp1350
g61
(dp1351
g88
g89
ssg70
g1340
sg63
(lp1352
S':'
asbag56
(g77
g58
NtRp1353
(dp1354
g61
(dp1355
sg70
g1340
sg63
(lp1356
g56
(g57
g58
NtRp1357
(dp1358
g61
(dp1359
g69
I4
ssg70
g1353
sg63
(lp1360
S'hard'
p1361
asbasbasbag56
(g72
g58
NtRp1362
(dp1363
g61
(dp1364
sg70
g636
sg63
(lp1365
g56
(g77
g58
NtRp1366
(dp1367
g61
(dp1368
g81
g82
ssg70
g1362
sg63
(lp1369
S'web2py_path'
p1370
asbag56
(g77
g58
NtRp1371
(dp1372
g61
(dp1373
g88
g89
ssg70
g1362
sg63
(lp1374
S':'
asbag56
(g77
g58
NtRp1375
(dp1376
g61
(dp1377
sg70
g1362
sg63
(lp1378
g56
(g57
g58
NtRp1379
(dp1380
g61
(dp1381
g69
I4
ssg70
g1375
sg63
(lp1382
g683
asbasbasbag56
(g72
g58
NtRp1383
(dp1384
g61
(dp1385
sg70
g636
sg63
(lp1386
g56
(g77
g58
NtRp1387
(dp1388
g61
(dp1389
g81
g82
ssg70
g1383
sg63
(lp1390
S'web2py_version'
p1391
asbag56
(g77
g58
NtRp1392
(dp1393
g61
(dp1394
g88
g89
ssg70
g1383
sg63
(lp1395
S':'
asbag56
(g77
g58
NtRp1396
(dp1397
g61
(dp1398
sg70
g1383
sg63
(lp1399
g56
(g57
g58
NtRp1400
(dp1401
g61
(dp1402
g69
I4
ssg70
g1396
sg63
(lp1403
g56
(g65
g58
NtRp1404
(dp1405
g61
(dp1406
g69
I3
ssg70
Nsg63
(lp1407
g56
(g72
g58
NtRp1408
(dp1409
g61
(dp1410
sg70
g1404
sg63
(lp1411
g56
(g77
g58
NtRp1412
(dp1413
g61
(dp1414
sg70
g1408
sg63
(lp1415
g56
(g57
g58
NtRp1416
(dp1417
g61
(dp1418
g69
I3
ssg70
g1412
sg63
(lp1419
S'1'
asbasbasbag56
(g72
g58
NtRp1420
(dp1421
g61
(dp1422
sg70
g1404
sg63
(lp1423
g56
(g77
g58
NtRp1424
(dp1425
g61
(dp1426
sg70
g1420
sg63
(lp1427
g56
(g57
g58
NtRp1428
(dp1429
g61
(dp1430
g69
I3
ssg70
g1424
sg63
(lp1431
S'99'
p1432
asbasbasbag56
(g72
g58
NtRp1433
(dp1434
g61
(dp1435
sg70
g1404
sg63
(lp1436
g56
(g77
g58
NtRp1437
(dp1438
g61
(dp1439
sg70
g1433
sg63
(lp1440
g56
(g57
g58
NtRp1441
(dp1442
g61
(dp1443
g69
I3
ssg70
g1437
sg63
(lp1444
S'2'
asbasbasbag56
(g72
g58
NtRp1445
(dp1446
g61
(dp1447
sg70
g1404
sg63
(lp1448
g56
(g77
g58
NtRp1449
(dp1450
g61
(dp1451
sg70
g1445
sg63
(lp1452
g56
(g57
g58
NtRp1453
(dp1454
g61
(dp1455
g69
I3
ssg70
g1449
sg63
(lp1456
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p1457
asbasbasbag56
(g72
g58
NtRp1458
(dp1459
g61
(dp1460
sg70
g1404
sg63
(lp1461
g56
(g77
g58
NtRp1462
(dp1463
g61
(dp1464
sg70
g1458
sg63
(lp1465
g56
(g57
g58
NtRp1466
(dp1467
g61
(dp1468
g69
I3
ssg70
g1462
sg63
(lp1469
S'stable'
p1470
asbasbasbasbasbasbasbag56
(g72
g58
NtRp1471
(dp1472
g61
(dp1473
sg70
g636
sg63
(lp1474
g56
(g77
g58
NtRp1475
(dp1476
g61
(dp1477
g81
g82
ssg70
g1471
sg63
(lp1478
S'wsgi_errors'
p1479
asbag56
(g77
g58
NtRp1480
(dp1481
g61
(dp1482
g88
g89
ssg70
g1471
sg63
(lp1483
S':'
asbag56
(g77
g58
NtRp1484
(dp1485
g61
(dp1486
sg70
g1471
sg63
(lp1487
g56
(g57
g58
NtRp1488
(dp1489
g61
(dp1490
g69
I4
ssg70
g1484
sg63
(lp1491
S"<open file '<stderr>', mode 'w' at 0x7f6c3cc60270>"
p1492
asbasbasbag56
(g72
g58
NtRp1493
(dp1494
g61
(dp1495
sg70
g636
sg63
(lp1496
g56
(g77
g58
NtRp1497
(dp1498
g61
(dp1499
g81
g82
ssg70
g1493
sg63
(lp1500
S'wsgi_file_wrapper'
p1501
asbag56
(g77
g58
NtRp1502
(dp1503
g61
(dp1504
g88
g89
ssg70
g1493
sg63
(lp1505
S':'
asbag56
(g77
g58
NtRp1506
(dp1507
g61
(dp1508
sg70
g1493
sg63
(lp1509
g56
(g57
g58
NtRp1510
(dp1511
g61
(dp1512
g69
I4
ssg70
g1506
sg63
(lp1513
S'<class wsgiref.util.FileWrapper at 0x2c84ce8>'
p1514
asbasbasbag56
(g72
g58
NtRp1515
(dp1516
g61
(dp1517
sg70
g636
sg63
(lp1518
g56
(g77
g58
NtRp1519
(dp1520
g61
(dp1521
g81
g82
ssg70
g1515
sg63
(lp1522
S'wsgi_input'
p1523
asbag56
(g77
g58
NtRp1524
(dp1525
g61
(dp1526
g88
g89
ssg70
g1515
sg63
(lp1527
S':'
asbag56
(g77
g58
NtRp1528
(dp1529
g61
(dp1530
sg70
g1515
sg63
(lp1531
g56
(g57
g58
NtRp1532
(dp1533
g61
(dp1534
g69
I4
ssg70
g1528
sg63
(lp1535
S'<socket._fileobject object at 0x33fd350>'
p1536
asbasbasbag56
(g72
g58
NtRp1537
(dp1538
g61
(dp1539
sg70
g636
sg63
(lp1540
g56
(g77
g58
NtRp1541
(dp1542
g61
(dp1543
g81
g82
ssg70
g1537
sg63
(lp1544
S'wsgi_multiprocess'
p1545
asbag56
(g77
g58
NtRp1546
(dp1547
g61
(dp1548
g88
g89
ssg70
g1537
sg63
(lp1549
S':'
asbag56
(g77
g58
NtRp1550
(dp1551
g61
(dp1552
sg70
g1537
sg63
(lp1553
g56
(g57
g58
NtRp1554
(dp1555
g61
(dp1556
g69
I4
ssg70
g1550
sg63
(lp1557
g795
asbasbasbag56
(g72
g58
NtRp1558
(dp1559
g61
(dp1560
sg70
g636
sg63
(lp1561
g56
(g77
g58
NtRp1562
(dp1563
g61
(dp1564
g81
g82
ssg70
g1558
sg63
(lp1565
S'wsgi_multithread'
p1566
asbag56
(g77
g58
NtRp1567
(dp1568
g61
(dp1569
g88
g89
ssg70
g1558
sg63
(lp1570
S':'
asbag56
(g77
g58
NtRp1571
(dp1572
g61
(dp1573
sg70
g1558
sg63
(lp1574
g56
(g57
g58
NtRp1575
(dp1576
g61
(dp1577
g69
I4
ssg70
g1571
sg63
(lp1578
g99
asbasbasbag56
(g72
g58
NtRp1579
(dp1580
g61
(dp1581
sg70
g636
sg63
(lp1582
g56
(g77
g58
NtRp1583
(dp1584
g61
(dp1585
g81
g82
ssg70
g1579
sg63
(lp1586
S'wsgi_run_once'
p1587
asbag56
(g77
g58
NtRp1588
(dp1589
g61
(dp1590
g88
g89
ssg70
g1579
sg63
(lp1591
S':'
asbag56
(g77
g58
NtRp1592
(dp1593
g61
(dp1594
sg70
g1579
sg63
(lp1595
g56
(g57
g58
NtRp1596
(dp1597
g61
(dp1598
g69
I4
ssg70
g1592
sg63
(lp1599
g795
asbasbasbag56
(g72
g58
NtRp1600
(dp1601
g61
(dp1602
sg70
g636
sg63
(lp1603
g56
(g77
g58
NtRp1604
(dp1605
g61
(dp1606
g81
g82
ssg70
g1600
sg63
(lp1607
S'wsgi_url_scheme'
p1608
asbag56
(g77
g58
NtRp1609
(dp1610
g61
(dp1611
g88
g89
ssg70
g1600
sg63
(lp1612
S':'
asbag56
(g77
g58
NtRp1613
(dp1614
g61
(dp1615
sg70
g1600
sg63
(lp1616
g56
(g57
g58
NtRp1617
(dp1618
g61
(dp1619
g69
I4
ssg70
g1613
sg63
(lp1620
S'http'
p1621
asbasbasbag56
(g72
g58
NtRp1622
(dp1623
g61
(dp1624
sg70
g636
sg63
(lp1625
g56
(g77
g58
NtRp1626
(dp1627
g61
(dp1628
g81
g82
ssg70
g1622
sg63
(lp1629
S'wsgi_version'
p1630
asbag56
(g77
g58
NtRp1631
(dp1632
g61
(dp1633
g88
g89
ssg70
g1622
sg63
(lp1634
S':'
asbag56
(g77
g58
NtRp1635
(dp1636
g61
(dp1637
sg70
g1622
sg63
(lp1638
g56
(g57
g58
NtRp1639
(dp1640
g61
(dp1641
g69
I4
ssg70
g1635
sg63
(lp1642
g56
(g65
g58
NtRp1643
(dp1644
g61
(dp1645
g69
I3
ssg70
Nsg63
(lp1646
g56
(g72
g58
NtRp1647
(dp1648
g61
(dp1649
sg70
g1643
sg63
(lp1650
g56
(g77
g58
NtRp1651
(dp1652
g61
(dp1653
sg70
g1647
sg63
(lp1654
g56
(g57
g58
NtRp1655
(dp1656
g61
(dp1657
g69
I3
ssg70
g1651
sg63
(lp1658
S'1'
asbasbasbag56
(g72
g58
NtRp1659
(dp1660
g61
(dp1661
sg70
g1643
sg63
(lp1662
g56
(g77
g58
NtRp1663
(dp1664
g61
(dp1665
sg70
g1659
sg63
(lp1666
g56
(g57
g58
NtRp1667
(dp1668
g61
(dp1669
g69
I3
ssg70
g1663
sg63
(lp1670
S'0'
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp1671
(dp1672
g61
(dp1673
sg70
g66
sg63
(lp1674
g56
(g77
g58
NtRp1675
(dp1676
g61
(dp1677
g81
g82
ssg70
g1671
sg63
(lp1678
S'extension'
p1679
asbag56
(g77
g58
NtRp1680
(dp1681
g61
(dp1682
g88
g89
ssg70
g1671
sg63
(lp1683
S':'
asbag56
(g77
g58
NtRp1684
(dp1685
g61
(dp1686
sg70
g1671
sg63
(lp1687
g56
(g57
g58
NtRp1688
(dp1689
g61
(dp1690
g69
I5
ssg70
g1684
sg63
(lp1691
S'html'
p1692
asbasbasbag56
(g72
g58
NtRp1693
(dp1694
g61
(dp1695
sg70
g66
sg63
(lp1696
g56
(g77
g58
NtRp1697
(dp1698
g61
(dp1699
g81
g82
ssg70
g1693
sg63
(lp1700
S'folder'
p1701
asbag56
(g77
g58
NtRp1702
(dp1703
g61
(dp1704
g88
g89
ssg70
g1693
sg63
(lp1705
S':'
asbag56
(g77
g58
NtRp1706
(dp1707
g61
(dp1708
sg70
g1693
sg63
(lp1709
g56
(g57
g58
NtRp1710
(dp1711
g61
(dp1712
g69
I5
ssg70
g1706
sg63
(lp1713
S'/home/jogi/Programmieren/web2py/applications/admin/'
p1714
asbasbasbag56
(g72
g58
NtRp1715
(dp1716
g61
(dp1717
sg70
g66
sg63
(lp1718
g56
(g77
g58
NtRp1719
(dp1720
g61
(dp1721
g81
g82
ssg70
g1715
sg63
(lp1722
S'function'
p1723
asbag56
(g77
g58
NtRp1724
(dp1725
g61
(dp1726
g88
g89
ssg70
g1715
sg63
(lp1727
S':'
asbag56
(g77
g58
NtRp1728
(dp1729
g61
(dp1730
sg70
g1715
sg63
(lp1731
g56
(g57
g58
NtRp1732
(dp1733
g61
(dp1734
g69
I5
ssg70
g1728
sg63
(lp1735
S'check_version'
p1736
asbasbasbag56
(g72
g58
NtRp1737
(dp1738
g61
(dp1739
sg70
g66
sg63
(lp1740
g56
(g77
g58
NtRp1741
(dp1742
g61
(dp1743
g81
g82
ssg70
g1737
sg63
(lp1744
S'get_vars'
p1745
asbag56
(g77
g58
NtRp1746
(dp1747
g61
(dp1748
g88
g89
ssg70
g1737
sg63
(lp1749
S':'
asbag56
(g77
g58
NtRp1750
(dp1751
g61
(dp1752
sg70
g1737
sg63
(lp1753
g56
(g57
g58
NtRp1754
(dp1755
g61
(dp1756
g69
I5
ssg70
g1750
sg63
(lp1757
g56
(g65
g58
NtRp1758
(dp1759
g61
(dp1760
g69
I4
ssg70
Nsg63
(lp1761
sbasbasbasbag56
(g72
g58
NtRp1762
(dp1763
g61
(dp1764
sg70
g66
sg63
(lp1765
g56
(g77
g58
NtRp1766
(dp1767
g61
(dp1768
g81
g82
ssg70
g1762
sg63
(lp1769
S'global_settings'
p1770
asbag56
(g77
g58
NtRp1771
(dp1772
g61
(dp1773
g88
g89
ssg70
g1762
sg63
(lp1774
S':'
asbag56
(g77
g58
NtRp1775
(dp1776
g61
(dp1777
sg70
g1762
sg63
(lp1778
g56
(g57
g58
NtRp1779
(dp1780
g61
(dp1781
g69
I5
ssg70
g1775
sg63
(lp1782
g56
(g65
g58
NtRp1783
(dp1784
g61
(dp1785
g69
I4
ssg70
Nsg63
(lp1786
g56
(g72
g58
NtRp1787
(dp1788
g61
(dp1789
sg70
g1783
sg63
(lp1790
g56
(g77
g58
NtRp1791
(dp1792
g61
(dp1793
g81
g82
ssg70
g1787
sg63
(lp1794
g648
asbag56
(g77
g58
NtRp1795
(dp1796
g61
(dp1797
g88
g89
ssg70
g1787
sg63
(lp1798
S':'
asbag56
(g77
g58
NtRp1799
(dp1800
g61
(dp1801
sg70
g1787
sg63
(lp1802
g56
(g57
g58
NtRp1803
(dp1804
g61
(dp1805
g69
I4
ssg70
g1799
sg63
(lp1806
S"set(['/home/jogi/Programmieren/web2py/applications/welcome/', '/home/jogi/Programmieren/web2py/applications/admin/'])"
p1807
asbasbasbag56
(g72
g58
NtRp1808
(dp1809
g61
(dp1810
sg70
g1783
sg63
(lp1811
g56
(g77
g58
NtRp1812
(dp1813
g61
(dp1814
g81
g82
ssg70
g1808
sg63
(lp1815
g670
asbag56
(g77
g58
NtRp1816
(dp1817
g61
(dp1818
g88
g89
ssg70
g1808
sg63
(lp1819
S':'
asbag56
(g77
g58
NtRp1820
(dp1821
g61
(dp1822
sg70
g1808
sg63
(lp1823
g56
(g57
g58
NtRp1824
(dp1825
g61
(dp1826
g69
I4
ssg70
g1820
sg63
(lp1827
g683
asbasbasbag56
(g72
g58
NtRp1828
(dp1829
g61
(dp1830
sg70
g1783
sg63
(lp1831
g56
(g77
g58
NtRp1832
(dp1833
g61
(dp1834
g81
g82
ssg70
g1828
sg63
(lp1835
g692
asbag56
(g77
g58
NtRp1836
(dp1837
g61
(dp1838
g88
g89
ssg70
g1828
sg63
(lp1839
S':'
asbag56
(g77
g58
NtRp1840
(dp1841
g61
(dp1842
sg70
g1828
sg63
(lp1843
g56
(g57
g58
NtRp1844
(dp1845
g61
(dp1846
g69
I4
ssg70
g1840
sg63
(lp1847
g56
(g65
g58
NtRp1848
(dp1849
g61
(dp1850
g69
I3
ssg70
Nsg63
(lp1851
sbasbasbasbag56
(g72
g58
NtRp1852
(dp1853
g61
(dp1854
sg70
g1783
sg63
(lp1855
g56
(g77
g58
NtRp1856
(dp1857
g61
(dp1858
g81
g82
ssg70
g1852
sg63
(lp1859
g717
asbag56
(g77
g58
NtRp1860
(dp1861
g61
(dp1862
g88
g89
ssg70
g1852
sg63
(lp1863
S':'
asbag56
(g77
g58
NtRp1864
(dp1865
g61
(dp1866
sg70
g1852
sg63
(lp1867
g56
(g57
g58
NtRp1868
(dp1869
g61
(dp1870
g69
I4
ssg70
g1864
sg63
(lp1871
S"<Values at 0x2dbb908: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'JogiNetU', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/home/jogi/Programmieren/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p1872
asbasbasbag56
(g72
g58
NtRp1873
(dp1874
g61
(dp1875
sg70
g1783
sg63
(lp1876
g56
(g77
g58
NtRp1877
(dp1878
g61
(dp1879
g81
g82
ssg70
g1873
sg63
(lp1880
g760
asbag56
(g77
g58
NtRp1881
(dp1882
g61
(dp1883
g88
g89
ssg70
g1873
sg63
(lp1884
S':'
asbag56
(g77
g58
NtRp1885
(dp1886
g61
(dp1887
sg70
g1873
sg63
(lp1888
g56
(g57
g58
NtRp1889
(dp1890
g61
(dp1891
g69
I4
ssg70
g1885
sg63
(lp1892
S'set([])'
p1893
asbasbasbag56
(g72
g58
NtRp1894
(dp1895
g61
(dp1896
sg70
g1783
sg63
(lp1897
g56
(g77
g58
NtRp1898
(dp1899
g61
(dp1900
g81
g82
ssg70
g1894
sg63
(lp1901
g782
asbag56
(g77
g58
NtRp1902
(dp1903
g61
(dp1904
g88
g89
ssg70
g1894
sg63
(lp1905
S':'
asbag56
(g77
g58
NtRp1906
(dp1907
g61
(dp1908
sg70
g1894
sg63
(lp1909
g56
(g57
g58
NtRp1910
(dp1911
g61
(dp1912
g69
I4
ssg70
g1906
sg63
(lp1913
g795
asbasbasbag56
(g72
g58
NtRp1914
(dp1915
g61
(dp1916
sg70
g1783
sg63
(lp1917
g56
(g77
g58
NtRp1918
(dp1919
g61
(dp1920
g81
g82
ssg70
g1914
sg63
(lp1921
g804
asbag56
(g77
g58
NtRp1922
(dp1923
g61
(dp1924
g88
g89
ssg70
g1914
sg63
(lp1925
S':'
asbag56
(g77
g58
NtRp1926
(dp1927
g61
(dp1928
sg70
g1914
sg63
(lp1929
g56
(g57
g58
NtRp1930
(dp1931
g61
(dp1932
g69
I4
ssg70
g1926
sg63
(lp1933
g817
asbasbasbag56
(g72
g58
NtRp1934
(dp1935
g61
(dp1936
sg70
g1783
sg63
(lp1937
g56
(g77
g58
NtRp1938
(dp1939
g61
(dp1940
g81
g82
ssg70
g1934
sg63
(lp1941
g1110
asbag56
(g77
g58
NtRp1942
(dp1943
g61
(dp1944
g88
g89
ssg70
g1934
sg63
(lp1945
S':'
asbag56
(g77
g58
NtRp1946
(dp1947
g61
(dp1948
sg70
g1934
sg63
(lp1949
g56
(g57
g58
NtRp1950
(dp1951
g61
(dp1952
g69
I4
ssg70
g1946
sg63
(lp1953
g795
asbasbasbag56
(g72
g58
NtRp1954
(dp1955
g61
(dp1956
sg70
g1783
sg63
(lp1957
g56
(g77
g58
NtRp1958
(dp1959
g61
(dp1960
g81
g82
ssg70
g1954
sg63
(lp1961
g1348
asbag56
(g77
g58
NtRp1962
(dp1963
g61
(dp1964
g88
g89
ssg70
g1954
sg63
(lp1965
S':'
asbag56
(g77
g58
NtRp1966
(dp1967
g61
(dp1968
sg70
g1954
sg63
(lp1969
g56
(g57
g58
NtRp1970
(dp1971
g61
(dp1972
g69
I4
ssg70
g1966
sg63
(lp1973
g1361
asbasbasbag56
(g72
g58
NtRp1974
(dp1975
g61
(dp1976
sg70
g1783
sg63
(lp1977
g56
(g77
g58
NtRp1978
(dp1979
g61
(dp1980
g81
g82
ssg70
g1974
sg63
(lp1981
g1391
asbag56
(g77
g58
NtRp1982
(dp1983
g61
(dp1984
g88
g89
ssg70
g1974
sg63
(lp1985
S':'
asbag56
(g77
g58
NtRp1986
(dp1987
g61
(dp1988
sg70
g1974
sg63
(lp1989
g56
(g57
g58
NtRp1990
(dp1991
g61
(dp1992
g69
I4
ssg70
g1986
sg63
(lp1993
g56
(g65
g58
NtRp1994
(dp1995
g61
(dp1996
g69
I3
ssg70
Nsg63
(lp1997
g56
(g72
g58
NtRp1998
(dp1999
g61
(dp2000
sg70
g1994
sg63
(lp2001
g56
(g77
g58
NtRp2002
(dp2003
g61
(dp2004
sg70
g1998
sg63
(lp2005
g56
(g57
g58
NtRp2006
(dp2007
g61
(dp2008
g69
I3
ssg70
g2002
sg63
(lp2009
S'1'
asbasbasbag56
(g72
g58
NtRp2010
(dp2011
g61
(dp2012
sg70
g1994
sg63
(lp2013
g56
(g77
g58
NtRp2014
(dp2015
g61
(dp2016
sg70
g2010
sg63
(lp2017
g56
(g57
g58
NtRp2018
(dp2019
g61
(dp2020
g69
I3
ssg70
g2014
sg63
(lp2021
S'99'
p2022
asbasbasbag56
(g72
g58
NtRp2023
(dp2024
g61
(dp2025
sg70
g1994
sg63
(lp2026
g56
(g77
g58
NtRp2027
(dp2028
g61
(dp2029
sg70
g2023
sg63
(lp2030
g56
(g57
g58
NtRp2031
(dp2032
g61
(dp2033
g69
I3
ssg70
g2027
sg63
(lp2034
S'2'
asbasbasbag56
(g72
g58
NtRp2035
(dp2036
g61
(dp2037
sg70
g1994
sg63
(lp2038
g56
(g77
g58
NtRp2039
(dp2040
g61
(dp2041
sg70
g2035
sg63
(lp2042
g56
(g57
g58
NtRp2043
(dp2044
g61
(dp2045
g69
I3
ssg70
g2039
sg63
(lp2046
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p2047
asbasbasbag56
(g72
g58
NtRp2048
(dp2049
g61
(dp2050
sg70
g1994
sg63
(lp2051
g56
(g77
g58
NtRp2052
(dp2053
g61
(dp2054
sg70
g2048
sg63
(lp2055
g56
(g57
g58
NtRp2056
(dp2057
g61
(dp2058
g69
I3
ssg70
g2052
sg63
(lp2059
g1470
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp2060
(dp2061
g61
(dp2062
sg70
g66
sg63
(lp2063
g56
(g77
g58
NtRp2064
(dp2065
g61
(dp2066
g81
g82
ssg70
g2060
sg63
(lp2067
S'is_https'
p2068
asbag56
(g77
g58
NtRp2069
(dp2070
g61
(dp2071
g88
g89
ssg70
g2060
sg63
(lp2072
S':'
asbag56
(g77
g58
NtRp2073
(dp2074
g61
(dp2075
sg70
g2060
sg63
(lp2076
g56
(g57
g58
NtRp2077
(dp2078
g61
(dp2079
g69
I5
ssg70
g2073
sg63
(lp2080
g795
asbasbasbag56
(g72
g58
NtRp2081
(dp2082
g61
(dp2083
sg70
g66
sg63
(lp2084
g56
(g77
g58
NtRp2085
(dp2086
g61
(dp2087
g81
g82
ssg70
g2081
sg63
(lp2088
S'is_local'
p2089
asbag56
(g77
g58
NtRp2090
(dp2091
g61
(dp2092
g88
g89
ssg70
g2081
sg63
(lp2093
S':'
asbag56
(g77
g58
NtRp2094
(dp2095
g61
(dp2096
sg70
g2081
sg63
(lp2097
g56
(g57
g58
NtRp2098
(dp2099
g61
(dp2100
g69
I5
ssg70
g2094
sg63
(lp2101
g99
asbasbasbag56
(g72
g58
NtRp2102
(dp2103
g61
(dp2104
sg70
g66
sg63
(lp2105
g56
(g77
g58
NtRp2106
(dp2107
g61
(dp2108
g81
g82
ssg70
g2102
sg63
(lp2109
S'is_restful'
p2110
asbag56
(g77
g58
NtRp2111
(dp2112
g61
(dp2113
g88
g89
ssg70
g2102
sg63
(lp2114
S':'
asbag56
(g77
g58
NtRp2115
(dp2116
g61
(dp2117
sg70
g2102
sg63
(lp2118
g56
(g57
g58
NtRp2119
(dp2120
g61
(dp2121
g69
I5
ssg70
g2115
sg63
(lp2122
g795
asbasbasbag56
(g72
g58
NtRp2123
(dp2124
g61
(dp2125
sg70
g66
sg63
(lp2126
g56
(g77
g58
NtRp2127
(dp2128
g61
(dp2129
g81
g82
ssg70
g2123
sg63
(lp2130
S'now'
p2131
asbag56
(g77
g58
NtRp2132
(dp2133
g61
(dp2134
g88
g89
ssg70
g2123
sg63
(lp2135
S':'
asbag56
(g77
g58
NtRp2136
(dp2137
g61
(dp2138
sg70
g2123
sg63
(lp2139
g56
(g57
g58
NtRp2140
(dp2141
g61
(dp2142
g69
I5
ssg70
g2136
sg63
(lp2143
S'datetime.datetime(2012, 3, 2, 11, 21, 13, 962820)'
p2144
asbasbasbag56
(g72
g58
NtRp2145
(dp2146
g61
(dp2147
sg70
g66
sg63
(lp2148
g56
(g77
g58
NtRp2149
(dp2150
g61
(dp2151
g81
g82
ssg70
g2145
sg63
(lp2152
S'post_vars'
p2153
asbag56
(g77
g58
NtRp2154
(dp2155
g61
(dp2156
g88
g89
ssg70
g2145
sg63
(lp2157
S':'
asbag56
(g77
g58
NtRp2158
(dp2159
g61
(dp2160
sg70
g2145
sg63
(lp2161
g56
(g57
g58
NtRp2162
(dp2163
g61
(dp2164
g69
I5
ssg70
g2158
sg63
(lp2165
g56
(g65
g58
NtRp2166
(dp2167
g61
(dp2168
g69
I4
ssg70
Nsg63
(lp2169
sbasbasbasbag56
(g72
g58
NtRp2170
(dp2171
g61
(dp2172
sg70
g66
sg63
(lp2173
g56
(g77
g58
NtRp2174
(dp2175
g61
(dp2176
g81
g82
ssg70
g2170
sg63
(lp2177
S'url'
p2178
asbag56
(g77
g58
NtRp2179
(dp2180
g61
(dp2181
g88
g89
ssg70
g2170
sg63
(lp2182
S':'
asbag56
(g77
g58
NtRp2183
(dp2184
g61
(dp2185
sg70
g2170
sg63
(lp2186
g56
(g57
g58
NtRp2187
(dp2188
g61
(dp2189
g69
I5
ssg70
g2183
sg63
(lp2190
S'/admin/default/check_version'
p2191
asbasbasbag56
(g72
g58
NtRp2192
(dp2193
g61
(dp2194
sg70
g66
sg63
(lp2195
g56
(g77
g58
NtRp2196
(dp2197
g61
(dp2198
g81
g82
ssg70
g2192
sg63
(lp2199
S'utcnow'
p2200
asbag56
(g77
g58
NtRp2201
(dp2202
g61
(dp2203
g88
g89
ssg70
g2192
sg63
(lp2204
S':'
asbag56
(g77
g58
NtRp2205
(dp2206
g61
(dp2207
sg70
g2192
sg63
(lp2208
g56
(g57
g58
NtRp2209
(dp2210
g61
(dp2211
g69
I5
ssg70
g2205
sg63
(lp2212
S'datetime.datetime(2012, 3, 2, 10, 21, 13, 962886)'
p2213
asbasbasbag56
(g72
g58
NtRp2214
(dp2215
g61
(dp2216
sg70
g66
sg63
(lp2217
g56
(g77
g58
NtRp2218
(dp2219
g61
(dp2220
g81
g82
ssg70
g2214
sg63
(lp2221
S'uuid'
p2222
asbag56
(g77
g58
NtRp2223
(dp2224
g61
(dp2225
g88
g89
ssg70
g2214
sg63
(lp2226
S':'
asbag56
(g77
g58
NtRp2227
(dp2228
g61
(dp2229
sg70
g2214
sg63
(lp2230
g56
(g57
g58
NtRp2231
(dp2232
g61
(dp2233
g69
I5
ssg70
g2227
sg63
(lp2234
S'admin/127.0.0.1.2012-03-02.11-21-13.9f80933f-82f0-4ebf-a20e-d4d7cbcb130e'
p2235
asbasbasbag56
(g72
g58
NtRp2236
(dp2237
g61
(dp2238
sg70
g66
sg63
(lp2239
g56
(g77
g58
NtRp2240
(dp2241
g61
(dp2242
g81
g82
ssg70
g2236
sg63
(lp2243
S'vars'
p2244
asbag56
(g77
g58
NtRp2245
(dp2246
g61
(dp2247
g88
g89
ssg70
g2236
sg63
(lp2248
S':'
asbag56
(g77
g58
NtRp2249
(dp2250
g61
(dp2251
sg70
g2236
sg63
(lp2252
g56
(g57
g58
NtRp2253
(dp2254
g61
(dp2255
g69
I5
ssg70
g2249
sg63
(lp2256
g56
(g65
g58
NtRp2257
(dp2258
g61
(dp2259
g69
I4
ssg70
Nsg63
(lp2260
sbasbasbasbag56
(g72
g58
NtRp2261
(dp2262
g61
(dp2263
sg70
g66
sg63
(lp2264
g56
(g77
g58
NtRp2265
(dp2266
g61
(dp2267
g81
g82
ssg70
g2261
sg63
(lp2268
S'wsgi'
p2269
asbag56
(g77
g58
NtRp2270
(dp2271
g61
(dp2272
g88
g89
ssg70
g2261
sg63
(lp2273
S':'
asbag56
(g77
g58
NtRp2274
(dp2275
g61
(dp2276
sg70
g2261
sg63
(lp2277
g56
(g57
g58
NtRp2278
(dp2279
g61
(dp2280
g69
I5
ssg70
g2274
sg63
(lp2281
g56
(g65
g58
NtRp2282
(dp2283
g61
(dp2284
g69
I4
ssg70
Nsg63
(lp2285
g56
(g72
g58
NtRp2286
(dp2287
g61
(dp2288
sg70
g2282
sg63
(lp2289
g56
(g77
g58
NtRp2290
(dp2291
g61
(dp2292
g81
g82
ssg70
g2286
sg63
(lp2293
S'environ'
p2294
asbag56
(g77
g58
NtRp2295
(dp2296
g61
(dp2297
g88
g89
ssg70
g2286
sg63
(lp2298
S':'
asbag56
(g77
g58
NtRp2299
(dp2300
g61
(dp2301
sg70
g2286
sg63
(lp2302
g56
(g57
g58
NtRp2303
(dp2304
g61
(dp2305
g69
I4
ssg70
g2299
sg63
(lp2306
g56
(g65
g58
NtRp2307
(dp2308
g61
(dp2309
g69
I3
ssg70
Nsg63
(lp2310
g56
(g72
g58
NtRp2311
(dp2312
g61
(dp2313
sg70
g2307
sg63
(lp2314
g56
(g77
g58
NtRp2315
(dp2316
g61
(dp2317
g81
g82
ssg70
g2311
sg63
(lp2318
S'CONTENT_LENGTH'
p2319
asbag56
(g77
g58
NtRp2320
(dp2321
g61
(dp2322
g88
g89
ssg70
g2311
sg63
(lp2323
S':'
asbag56
(g77
g58
NtRp2324
(dp2325
g61
(dp2326
sg70
g2311
sg63
(lp2327
g56
(g57
g58
NtRp2328
(dp2329
g61
(dp2330
g69
I3
ssg70
g2324
sg63
(lp2331
S'0'
asbasbasbag56
(g72
g58
NtRp2332
(dp2333
g61
(dp2334
sg70
g2307
sg63
(lp2335
g56
(g77
g58
NtRp2336
(dp2337
g61
(dp2338
g81
g82
ssg70
g2332
sg63
(lp2339
S'HTTP_ACCEPT'
p2340
asbag56
(g77
g58
NtRp2341
(dp2342
g61
(dp2343
g88
g89
ssg70
g2332
sg63
(lp2344
S':'
asbag56
(g77
g58
NtRp2345
(dp2346
g61
(dp2347
sg70
g2332
sg63
(lp2348
g56
(g57
g58
NtRp2349
(dp2350
g61
(dp2351
g69
I3
ssg70
g2345
sg63
(lp2352
g839
asbasbasbag56
(g72
g58
NtRp2353
(dp2354
g61
(dp2355
sg70
g2307
sg63
(lp2356
g56
(g77
g58
NtRp2357
(dp2358
g61
(dp2359
g81
g82
ssg70
g2353
sg63
(lp2360
S'HTTP_ACCEPT_ENCODING'
p2361
asbag56
(g77
g58
NtRp2362
(dp2363
g61
(dp2364
g88
g89
ssg70
g2353
sg63
(lp2365
S':'
asbag56
(g77
g58
NtRp2366
(dp2367
g61
(dp2368
sg70
g2353
sg63
(lp2369
g56
(g57
g58
NtRp2370
(dp2371
g61
(dp2372
g69
I3
ssg70
g2366
sg63
(lp2373
g861
asbasbasbag56
(g72
g58
NtRp2374
(dp2375
g61
(dp2376
sg70
g2307
sg63
(lp2377
g56
(g77
g58
NtRp2378
(dp2379
g61
(dp2380
g81
g82
ssg70
g2374
sg63
(lp2381
S'HTTP_ACCEPT_LANGUAGE'
p2382
asbag56
(g77
g58
NtRp2383
(dp2384
g61
(dp2385
g88
g89
ssg70
g2374
sg63
(lp2386
S':'
asbag56
(g77
g58
NtRp2387
(dp2388
g61
(dp2389
sg70
g2374
sg63
(lp2390
g56
(g57
g58
NtRp2391
(dp2392
g61
(dp2393
g69
I3
ssg70
g2387
sg63
(lp2394
g883
asbasbasbag56
(g72
g58
NtRp2395
(dp2396
g61
(dp2397
sg70
g2307
sg63
(lp2398
g56
(g77
g58
NtRp2399
(dp2400
g61
(dp2401
g81
g82
ssg70
g2395
sg63
(lp2402
S'HTTP_CACHE_CONTROL'
p2403
asbag56
(g77
g58
NtRp2404
(dp2405
g61
(dp2406
g88
g89
ssg70
g2395
sg63
(lp2407
S':'
asbag56
(g77
g58
NtRp2408
(dp2409
g61
(dp2410
sg70
g2395
sg63
(lp2411
g56
(g57
g58
NtRp2412
(dp2413
g61
(dp2414
g69
I3
ssg70
g2408
sg63
(lp2415
g905
asbasbasbag56
(g72
g58
NtRp2416
(dp2417
g61
(dp2418
sg70
g2307
sg63
(lp2419
g56
(g77
g58
NtRp2420
(dp2421
g61
(dp2422
g81
g82
ssg70
g2416
sg63
(lp2423
S'HTTP_CONNECTION'
p2424
asbag56
(g77
g58
NtRp2425
(dp2426
g61
(dp2427
g88
g89
ssg70
g2416
sg63
(lp2428
S':'
asbag56
(g77
g58
NtRp2429
(dp2430
g61
(dp2431
sg70
g2416
sg63
(lp2432
g56
(g57
g58
NtRp2433
(dp2434
g61
(dp2435
g69
I3
ssg70
g2429
sg63
(lp2436
g927
asbasbasbag56
(g72
g58
NtRp2437
(dp2438
g61
(dp2439
sg70
g2307
sg63
(lp2440
g56
(g77
g58
NtRp2441
(dp2442
g61
(dp2443
g81
g82
ssg70
g2437
sg63
(lp2444
S'HTTP_CONTENT_LENGTH'
p2445
asbag56
(g77
g58
NtRp2446
(dp2447
g61
(dp2448
g88
g89
ssg70
g2437
sg63
(lp2449
S':'
asbag56
(g77
g58
NtRp2450
(dp2451
g61
(dp2452
sg70
g2437
sg63
(lp2453
g56
(g57
g58
NtRp2454
(dp2455
g61
(dp2456
g69
I3
ssg70
g2450
sg63
(lp2457
S'0'
asbasbasbag56
(g72
g58
NtRp2458
(dp2459
g61
(dp2460
sg70
g2307
sg63
(lp2461
g56
(g77
g58
NtRp2462
(dp2463
g61
(dp2464
g81
g82
ssg70
g2458
sg63
(lp2465
S'HTTP_COOKIE'
p2466
asbag56
(g77
g58
NtRp2467
(dp2468
g61
(dp2469
g88
g89
ssg70
g2458
sg63
(lp2470
S':'
asbag56
(g77
g58
NtRp2471
(dp2472
g61
(dp2473
sg70
g2458
sg63
(lp2474
g56
(g57
g58
NtRp2475
(dp2476
g61
(dp2477
g69
I3
ssg70
g2471
sg63
(lp2478
g970
asbasbasbag56
(g72
g58
NtRp2479
(dp2480
g61
(dp2481
sg70
g2307
sg63
(lp2482
g56
(g77
g58
NtRp2483
(dp2484
g61
(dp2485
g81
g82
ssg70
g2479
sg63
(lp2486
S'HTTP_DNT'
p2487
asbag56
(g77
g58
NtRp2488
(dp2489
g61
(dp2490
g88
g89
ssg70
g2479
sg63
(lp2491
S':'
asbag56
(g77
g58
NtRp2492
(dp2493
g61
(dp2494
sg70
g2479
sg63
(lp2495
g56
(g57
g58
NtRp2496
(dp2497
g61
(dp2498
g69
I3
ssg70
g2492
sg63
(lp2499
S'1'
asbasbasbag56
(g72
g58
NtRp2500
(dp2501
g61
(dp2502
sg70
g2307
sg63
(lp2503
g56
(g77
g58
NtRp2504
(dp2505
g61
(dp2506
g81
g82
ssg70
g2500
sg63
(lp2507
S'HTTP_HOST'
p2508
asbag56
(g77
g58
NtRp2509
(dp2510
g61
(dp2511
g88
g89
ssg70
g2500
sg63
(lp2512
S':'
asbag56
(g77
g58
NtRp2513
(dp2514
g61
(dp2515
sg70
g2500
sg63
(lp2516
g56
(g57
g58
NtRp2517
(dp2518
g61
(dp2519
g69
I3
ssg70
g2513
sg63
(lp2520
g1013
asbasbasbag56
(g72
g58
NtRp2521
(dp2522
g61
(dp2523
sg70
g2307
sg63
(lp2524
g56
(g77
g58
NtRp2525
(dp2526
g61
(dp2527
g81
g82
ssg70
g2521
sg63
(lp2528
S'HTTP_PRAGMA'
p2529
asbag56
(g77
g58
NtRp2530
(dp2531
g61
(dp2532
g88
g89
ssg70
g2521
sg63
(lp2533
S':'
asbag56
(g77
g58
NtRp2534
(dp2535
g61
(dp2536
sg70
g2521
sg63
(lp2537
g56
(g57
g58
NtRp2538
(dp2539
g61
(dp2540
g69
I3
ssg70
g2534
sg63
(lp2541
g1035
asbasbasbag56
(g72
g58
NtRp2542
(dp2543
g61
(dp2544
sg70
g2307
sg63
(lp2545
g56
(g77
g58
NtRp2546
(dp2547
g61
(dp2548
g81
g82
ssg70
g2542
sg63
(lp2549
S'HTTP_REFERER'
p2550
asbag56
(g77
g58
NtRp2551
(dp2552
g61
(dp2553
g88
g89
ssg70
g2542
sg63
(lp2554
S':'
asbag56
(g77
g58
NtRp2555
(dp2556
g61
(dp2557
sg70
g2542
sg63
(lp2558
g56
(g57
g58
NtRp2559
(dp2560
g61
(dp2561
g69
I3
ssg70
g2555
sg63
(lp2562
g1057
asbasbasbag56
(g72
g58
NtRp2563
(dp2564
g61
(dp2565
sg70
g2307
sg63
(lp2566
g56
(g77
g58
NtRp2567
(dp2568
g61
(dp2569
g81
g82
ssg70
g2563
sg63
(lp2570
S'HTTP_USER_AGENT'
p2571
asbag56
(g77
g58
NtRp2572
(dp2573
g61
(dp2574
g88
g89
ssg70
g2563
sg63
(lp2575
S':'
asbag56
(g77
g58
NtRp2576
(dp2577
g61
(dp2578
sg70
g2563
sg63
(lp2579
g56
(g57
g58
NtRp2580
(dp2581
g61
(dp2582
g69
I3
ssg70
g2576
sg63
(lp2583
g1079
asbasbasbag56
(g72
g58
NtRp2584
(dp2585
g61
(dp2586
sg70
g2307
sg63
(lp2587
g56
(g77
g58
NtRp2588
(dp2589
g61
(dp2590
g81
g82
ssg70
g2584
sg63
(lp2591
S'HTTP_X_REQUESTED_WITH'
p2592
asbag56
(g77
g58
NtRp2593
(dp2594
g61
(dp2595
g88
g89
ssg70
g2584
sg63
(lp2596
S':'
asbag56
(g77
g58
NtRp2597
(dp2598
g61
(dp2599
sg70
g2584
sg63
(lp2600
g56
(g57
g58
NtRp2601
(dp2602
g61
(dp2603
g69
I3
ssg70
g2597
sg63
(lp2604
g1101
asbasbasbag56
(g72
g58
NtRp2605
(dp2606
g61
(dp2607
sg70
g2307
sg63
(lp2608
g56
(g77
g58
NtRp2609
(dp2610
g61
(dp2611
g81
g82
ssg70
g2605
sg63
(lp2612
S'PATH_INFO'
p2613
asbag56
(g77
g58
NtRp2614
(dp2615
g61
(dp2616
g88
g89
ssg70
g2605
sg63
(lp2617
S':'
asbag56
(g77
g58
NtRp2618
(dp2619
g61
(dp2620
sg70
g2605
sg63
(lp2621
g56
(g57
g58
NtRp2622
(dp2623
g61
(dp2624
g69
I3
ssg70
g2618
sg63
(lp2625
g1144
asbasbasbag56
(g72
g58
NtRp2626
(dp2627
g61
(dp2628
sg70
g2307
sg63
(lp2629
g56
(g77
g58
NtRp2630
(dp2631
g61
(dp2632
g81
g82
ssg70
g2626
sg63
(lp2633
S'QUERY_STRING'
p2634
asbag56
(g77
g58
NtRp2635
(dp2636
g61
(dp2637
g88
g89
ssg70
g2626
sg63
(lp2638
S':'
asbag56
(g77
g58
NtRp2639
(dp2640
g61
(dp2641
sg70
g2626
sg63
(lp2642
g56
(g57
g58
NtRp2643
(dp2644
g61
(dp2645
g69
I3
ssg70
g2639
sg63
(lp2646
S''
asbasbasbag56
(g72
g58
NtRp2647
(dp2648
g61
(dp2649
sg70
g2307
sg63
(lp2650
g56
(g77
g58
NtRp2651
(dp2652
g61
(dp2653
g81
g82
ssg70
g2647
sg63
(lp2654
S'REMOTE_ADDR'
p2655
asbag56
(g77
g58
NtRp2656
(dp2657
g61
(dp2658
g88
g89
ssg70
g2647
sg63
(lp2659
S':'
asbag56
(g77
g58
NtRp2660
(dp2661
g61
(dp2662
sg70
g2647
sg63
(lp2663
g56
(g57
g58
NtRp2664
(dp2665
g61
(dp2666
g69
I3
ssg70
g2660
sg63
(lp2667
g189
asbasbasbag56
(g72
g58
NtRp2668
(dp2669
g61
(dp2670
sg70
g2307
sg63
(lp2671
g56
(g77
g58
NtRp2672
(dp2673
g61
(dp2674
g81
g82
ssg70
g2668
sg63
(lp2675
S'REMOTE_PORT'
p2676
asbag56
(g77
g58
NtRp2677
(dp2678
g61
(dp2679
g88
g89
ssg70
g2668
sg63
(lp2680
S':'
asbag56
(g77
g58
NtRp2681
(dp2682
g61
(dp2683
sg70
g2668
sg63
(lp2684
g56
(g57
g58
NtRp2685
(dp2686
g61
(dp2687
g69
I3
ssg70
g2681
sg63
(lp2688
g1208
asbasbasbag56
(g72
g58
NtRp2689
(dp2690
g61
(dp2691
sg70
g2307
sg63
(lp2692
g56
(g77
g58
NtRp2693
(dp2694
g61
(dp2695
g81
g82
ssg70
g2689
sg63
(lp2696
S'REQUEST_METHOD'
p2697
asbag56
(g77
g58
NtRp2698
(dp2699
g61
(dp2700
g88
g89
ssg70
g2689
sg63
(lp2701
S':'
asbag56
(g77
g58
NtRp2702
(dp2703
g61
(dp2704
sg70
g2689
sg63
(lp2705
g56
(g57
g58
NtRp2706
(dp2707
g61
(dp2708
g69
I3
ssg70
g2702
sg63
(lp2709
g1230
asbasbasbag56
(g72
g58
NtRp2710
(dp2711
g61
(dp2712
sg70
g2307
sg63
(lp2713
g56
(g77
g58
NtRp2714
(dp2715
g61
(dp2716
g81
g82
ssg70
g2710
sg63
(lp2717
S'SCRIPT_NAME'
p2718
asbag56
(g77
g58
NtRp2719
(dp2720
g61
(dp2721
g88
g89
ssg70
g2710
sg63
(lp2722
S':'
asbag56
(g77
g58
NtRp2723
(dp2724
g61
(dp2725
sg70
g2710
sg63
(lp2726
g56
(g57
g58
NtRp2727
(dp2728
g61
(dp2729
g69
I3
ssg70
g2723
sg63
(lp2730
S''
asbasbasbag56
(g72
g58
NtRp2731
(dp2732
g61
(dp2733
sg70
g2307
sg63
(lp2734
g56
(g77
g58
NtRp2735
(dp2736
g61
(dp2737
g81
g82
ssg70
g2731
sg63
(lp2738
S'SERVER_NAME'
p2739
asbag56
(g77
g58
NtRp2740
(dp2741
g61
(dp2742
g88
g89
ssg70
g2731
sg63
(lp2743
S':'
asbag56
(g77
g58
NtRp2744
(dp2745
g61
(dp2746
sg70
g2731
sg63
(lp2747
g56
(g57
g58
NtRp2748
(dp2749
g61
(dp2750
g69
I3
ssg70
g2744
sg63
(lp2751
g1273
asbasbasbag56
(g72
g58
NtRp2752
(dp2753
g61
(dp2754
sg70
g2307
sg63
(lp2755
g56
(g77
g58
NtRp2756
(dp2757
g61
(dp2758
g81
g82
ssg70
g2752
sg63
(lp2759
S'SERVER_PORT'
p2760
asbag56
(g77
g58
NtRp2761
(dp2762
g61
(dp2763
g88
g89
ssg70
g2752
sg63
(lp2764
S':'
asbag56
(g77
g58
NtRp2765
(dp2766
g61
(dp2767
sg70
g2752
sg63
(lp2768
g56
(g57
g58
NtRp2769
(dp2770
g61
(dp2771
g69
I3
ssg70
g2765
sg63
(lp2772
g1295
asbasbasbag56
(g72
g58
NtRp2773
(dp2774
g61
(dp2775
sg70
g2307
sg63
(lp2776
g56
(g77
g58
NtRp2777
(dp2778
g61
(dp2779
g81
g82
ssg70
g2773
sg63
(lp2780
S'SERVER_PROTOCOL'
p2781
asbag56
(g77
g58
NtRp2782
(dp2783
g61
(dp2784
g88
g89
ssg70
g2773
sg63
(lp2785
S':'
asbag56
(g77
g58
NtRp2786
(dp2787
g61
(dp2788
sg70
g2773
sg63
(lp2789
g56
(g57
g58
NtRp2790
(dp2791
g61
(dp2792
g69
I3
ssg70
g2786
sg63
(lp2793
g1317
asbasbasbag56
(g72
g58
NtRp2794
(dp2795
g61
(dp2796
sg70
g2307
sg63
(lp2797
g56
(g77
g58
NtRp2798
(dp2799
g61
(dp2800
g81
g82
ssg70
g2794
sg63
(lp2801
S'SERVER_SOFTWARE'
p2802
asbag56
(g77
g58
NtRp2803
(dp2804
g61
(dp2805
g88
g89
ssg70
g2794
sg63
(lp2806
S':'
asbag56
(g77
g58
NtRp2807
(dp2808
g61
(dp2809
sg70
g2794
sg63
(lp2810
g56
(g57
g58
NtRp2811
(dp2812
g61
(dp2813
g69
I3
ssg70
g2807
sg63
(lp2814
g1339
asbasbasbag56
(g72
g58
NtRp2815
(dp2816
g61
(dp2817
sg70
g2307
sg63
(lp2818
g56
(g77
g58
NtRp2819
(dp2820
g61
(dp2821
g81
g82
ssg70
g2815
sg63
(lp2822
S'wsgi.errors'
p2823
asbag56
(g77
g58
NtRp2824
(dp2825
g61
(dp2826
g88
g89
ssg70
g2815
sg63
(lp2827
S':'
asbag56
(g77
g58
NtRp2828
(dp2829
g61
(dp2830
sg70
g2815
sg63
(lp2831
g56
(g57
g58
NtRp2832
(dp2833
g61
(dp2834
g69
I3
ssg70
g2828
sg63
(lp2835
S"<open file '<stderr>', mode 'w' at 0x7f6c3cc60270>"
p2836
asbasbasbag56
(g72
g58
NtRp2837
(dp2838
g61
(dp2839
sg70
g2307
sg63
(lp2840
g56
(g77
g58
NtRp2841
(dp2842
g61
(dp2843
g81
g82
ssg70
g2837
sg63
(lp2844
S'wsgi.file_wrapper'
p2845
asbag56
(g77
g58
NtRp2846
(dp2847
g61
(dp2848
g88
g89
ssg70
g2837
sg63
(lp2849
S':'
asbag56
(g77
g58
NtRp2850
(dp2851
g61
(dp2852
sg70
g2837
sg63
(lp2853
g56
(g57
g58
NtRp2854
(dp2855
g61
(dp2856
g69
I3
ssg70
g2850
sg63
(lp2857
S'<class wsgiref.util.FileWrapper at 0x2c84ce8>'
p2858
asbasbasbag56
(g72
g58
NtRp2859
(dp2860
g61
(dp2861
sg70
g2307
sg63
(lp2862
g56
(g77
g58
NtRp2863
(dp2864
g61
(dp2865
g81
g82
ssg70
g2859
sg63
(lp2866
S'wsgi.input'
p2867
asbag56
(g77
g58
NtRp2868
(dp2869
g61
(dp2870
g88
g89
ssg70
g2859
sg63
(lp2871
S':'
asbag56
(g77
g58
NtRp2872
(dp2873
g61
(dp2874
sg70
g2859
sg63
(lp2875
g56
(g57
g58
NtRp2876
(dp2877
g61
(dp2878
g69
I3
ssg70
g2872
sg63
(lp2879
S"<open file '<fdopen>', mode 'w+b' at 0x336ec00>"
p2880
asbasbasbag56
(g72
g58
NtRp2881
(dp2882
g61
(dp2883
sg70
g2307
sg63
(lp2884
g56
(g77
g58
NtRp2885
(dp2886
g61
(dp2887
g81
g82
ssg70
g2881
sg63
(lp2888
S'wsgi.multiprocess'
p2889
asbag56
(g77
g58
NtRp2890
(dp2891
g61
(dp2892
g88
g89
ssg70
g2881
sg63
(lp2893
S':'
asbag56
(g77
g58
NtRp2894
(dp2895
g61
(dp2896
sg70
g2881
sg63
(lp2897
g56
(g57
g58
NtRp2898
(dp2899
g61
(dp2900
g69
I3
ssg70
g2894
sg63
(lp2901
g795
asbasbasbag56
(g72
g58
NtRp2902
(dp2903
g61
(dp2904
sg70
g2307
sg63
(lp2905
g56
(g77
g58
NtRp2906
(dp2907
g61
(dp2908
g81
g82
ssg70
g2902
sg63
(lp2909
S'wsgi.multithread'
p2910
asbag56
(g77
g58
NtRp2911
(dp2912
g61
(dp2913
g88
g89
ssg70
g2902
sg63
(lp2914
S':'
asbag56
(g77
g58
NtRp2915
(dp2916
g61
(dp2917
sg70
g2902
sg63
(lp2918
g56
(g57
g58
NtRp2919
(dp2920
g61
(dp2921
g69
I3
ssg70
g2915
sg63
(lp2922
g99
asbasbasbag56
(g72
g58
NtRp2923
(dp2924
g61
(dp2925
sg70
g2307
sg63
(lp2926
g56
(g77
g58
NtRp2927
(dp2928
g61
(dp2929
g81
g82
ssg70
g2923
sg63
(lp2930
S'wsgi.run_once'
p2931
asbag56
(g77
g58
NtRp2932
(dp2933
g61
(dp2934
g88
g89
ssg70
g2923
sg63
(lp2935
S':'
asbag56
(g77
g58
NtRp2936
(dp2937
g61
(dp2938
sg70
g2923
sg63
(lp2939
g56
(g57
g58
NtRp2940
(dp2941
g61
(dp2942
g69
I3
ssg70
g2936
sg63
(lp2943
g795
asbasbasbag56
(g72
g58
NtRp2944
(dp2945
g61
(dp2946
sg70
g2307
sg63
(lp2947
g56
(g77
g58
NtRp2948
(dp2949
g61
(dp2950
g81
g82
ssg70
g2944
sg63
(lp2951
S'wsgi.url_scheme'
p2952
asbag56
(g77
g58
NtRp2953
(dp2954
g61
(dp2955
g88
g89
ssg70
g2944
sg63
(lp2956
S':'
asbag56
(g77
g58
NtRp2957
(dp2958
g61
(dp2959
sg70
g2944
sg63
(lp2960
g56
(g57
g58
NtRp2961
(dp2962
g61
(dp2963
g69
I3
ssg70
g2957
sg63
(lp2964
g1621
asbasbasbag56
(g72
g58
NtRp2965
(dp2966
g61
(dp2967
sg70
g2307
sg63
(lp2968
g56
(g77
g58
NtRp2969
(dp2970
g61
(dp2971
g81
g82
ssg70
g2965
sg63
(lp2972
S'wsgi.version'
p2973
asbag56
(g77
g58
NtRp2974
(dp2975
g61
(dp2976
g88
g89
ssg70
g2965
sg63
(lp2977
S':'
asbag56
(g77
g58
NtRp2978
(dp2979
g61
(dp2980
sg70
g2965
sg63
(lp2981
g56
(g57
g58
NtRp2982
(dp2983
g61
(dp2984
g69
I3
ssg70
g2978
sg63
(lp2985
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2986
(lp2987
(dp2988
S'file'
p2989
S'/home/jogi/Programmieren/web2py/gluon/restricted.py'
p2990
sS'dump'
p2991
(dp2992
S'environment'
p2993
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}"
p2994
sS'ccode'
p2995
S'<code object <module> at 0x33de730, file "/home/...plications/admin/controllers/default.py", line 3>'
p2996
ssS'lnum'
p2997
I194
sS'lines'
p2998
(dp2999
I192
S'        else:'
p3000
sI193
S'            ccode = compile2(code,layer)'
p3001
sI194
S'        exec ccode in environment'
p3002
sI195
S'    except HTTP:'
p3003
sI196
S'        raise'
p3004
sI197
S'    except Exception, error:'
p3005
sI198
S'        # XXX Show exception in Wing IDE if running in debugger'
p3006
sI189
S'    try:'
p3007
sI190
S'        if type(code) == types.CodeType:'
p3008
sI191
S'            ccode = code'
p3009
ssS'call'
p3010
S"(code='# coding: utf8\\n\\nfrom gluon.admin import *\\nfrom g...\\n\\nresponse._vars=response._caller(check_version)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}, layer='/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py')"
p3011
sS'func'
p3012
S'restricted'
p3013
sa(dp3014
g2989
S'/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py'
p3015
sg2991
(dp3016
sg2997
I1225
sg2998
(dp3017
I1216
S'    else:'
p3018
sI1217
S'        return dict(form=T("Disabled"))'
p3019
sI1218
S''
sI1219
S'def reload_routes():'
p3020
sI1220
S'    """ Reload routes.py """'
p3021
sI1221
S'    import gluon.rewrite'
p3022
sI1222
S'    gluon.rewrite.load()'
p3023
sI1223
S"    redirect(URL('site'))"
p3024
sI1214
S'            auth.settings.registration_requires_approval = False'
p3025
sI1215
S'        return dict(form=auth())'
p3026
ssg3010
S'()'
p3027
sg3012
S'<module>'
p3028
sa(dp3029
g2989
S'/home/jogi/Programmieren/web2py/gluon/globals.py'
p3030
sg2991
(dp3031
S'self'
p3032
S'undefined'
p3033
sS'f'
S'<function check_version>'
p3034
ssg2997
I149
sg2998
(dp3035
I144
S'        self.meta = Storage()      # used by web2py_ajax.html'
p3036
sI145
S'        self.menu = []             # used by the default view layout'
p3037
sI146
S'        self.files = []            # used by web2py_ajax.html'
p3038
sI147
S'        self.generic_patterns = [] # patterns to allow generic views'
p3039
sI148
S'        self._vars = None'
p3040
sI149
S'        self._caller = lambda f: f()'
p3041
sI150
S'        self._view_environment = None'
p3042
sI151
S'        self._custom_commit = None'
p3043
sI152
S'        self._custom_rollback = None'
p3044
sI153
S''
ssg3010
S'(f=<function check_version>)'
p3045
sg3012
S'<lambda>'
p3046
sa(dp3047
g2989
S'/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py'
p3048
sg2991
(dp3049
S'global XML'
p3050
S"<class 'gluon.html.XML'>"
p3051
sS'version_number'
p3052
S"(1, 99, 5, datetime.datetime(2012, 3, 1, 21, 22, 41), 'stable')"
p3053
ssg2997
I105
sg2998
(dp3054
I100
S"        return A(T('web2py is up to date'), _href=WEB2PY_URL)"
p3055
sI101
S'    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):'
p3056
sI102
S"        return SPAN('You should upgrade to version %s' % version_number)"
p3057
sI103
S'    else:'
p3058
sI104
S"        return sp_button(URL('upgrade_web2py'), T('upgrade now')) \\"
p3059
sI105
S'          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)'
p3060
sI106
S''
sI107
S''
sI108
S'def logout():'
p3061
sI109
S'    """ Logout handler """'
p3062
ssg3010
S'()'
p3063
sg3012
S'check_version'
p3064
sasS'pyver'
p3065
S'Python 2.7.2+: /usr/bin/python'
p3066
sS'session'
p3067
g56
(g57
g58
NtRp3068
(dp3069
g61
(dp3070
sg63
(lp3071
g56
(g65
g58
NtRp3072
(dp3073
g61
(dp3074
g69
I5
ssg70
Nsg63
(lp3075
g56
(g72
g58
NtRp3076
(dp3077
g61
(dp3078
sg70
g3072
sg63
(lp3079
g56
(g77
g58
NtRp3080
(dp3081
g61
(dp3082
g81
g82
ssg70
g3076
sg63
(lp3083
S'authorized'
p3084
asbag56
(g77
g58
NtRp3085
(dp3086
g61
(dp3087
g88
g89
ssg70
g3076
sg63
(lp3088
S':'
asbag56
(g77
g58
NtRp3089
(dp3090
g61
(dp3091
sg70
g3076
sg63
(lp3092
g56
(g57
g58
NtRp3093
(dp3094
g61
(dp3095
g69
I5
ssg70
g3089
sg63
(lp3096
g99
asbasbasbag56
(g72
g58
NtRp3097
(dp3098
g61
(dp3099
sg70
g3072
sg63
(lp3100
g56
(g77
g58
NtRp3101
(dp3102
g61
(dp3103
g81
g82
ssg70
g3097
sg63
(lp3104
S'check_version'
p3105
asbag56
(g77
g58
NtRp3106
(dp3107
g61
(dp3108
g88
g89
ssg70
g3097
sg63
(lp3109
S':'
asbag56
(g77
g58
NtRp3110
(dp3111
g61
(dp3112
sg70
g3097
sg63
(lp3113
g56
(g57
g58
NtRp3114
(dp3115
g61
(dp3116
g69
I5
ssg70
g3110
sg63
(lp3117
g795
asbasbasbag56
(g72
g58
NtRp3118
(dp3119
g61
(dp3120
sg70
g3072
sg63
(lp3121
g56
(g77
g58
NtRp3122
(dp3123
g61
(dp3124
g81
g82
ssg70
g3118
sg63
(lp3125
S'last_time'
p3126
asbag56
(g77
g58
NtRp3127
(dp3128
g61
(dp3129
g88
g89
ssg70
g3118
sg63
(lp3130
S':'
asbag56
(g77
g58
NtRp3131
(dp3132
g61
(dp3133
sg70
g3118
sg63
(lp3134
g56
(g57
g58
NtRp3135
(dp3136
g61
(dp3137
g69
I5
ssg70
g3131
sg63
(lp3138
S'1330683673.993174'
p3139
asbasbasbasbasbsS'etype'
p3140
S"<type 'exceptions.TypeError'>"
p3141
sS'date'
p3142
S'Fri Mar  2 11:21:14 2012'
p3143
sS'response'
p3144
g56
(g57
g58
NtRp3145
(dp3146
g61
(dp3147
sg63
(lp3148
g56
(g65
g58
NtRp3149
(dp3150
g61
(dp3151
g69
I5
ssg70
Nsg63
(lp3152
g56
(g72
g58
NtRp3153
(dp3154
g61
(dp3155
sg70
g3149
sg63
(lp3156
g56
(g77
g58
NtRp3157
(dp3158
g61
(dp3159
g81
g82
ssg70
g3153
sg63
(lp3160
g154
asbag56
(g77
g58
NtRp3161
(dp3162
g61
(dp3163
g88
g89
ssg70
g3153
sg63
(lp3164
S':'
asbag56
(g77
g58
NtRp3165
(dp3166
g61
(dp3167
sg70
g3153
sg63
(lp3168
g56
(g57
g58
NtRp3169
(dp3170
g61
(dp3171
g69
I5
ssg70
g3165
sg63
(lp3172
S'<cStringIO.StringO object at 0x36e0880>'
p3173
asbasbasbag56
(g72
g58
NtRp3174
(dp3175
g61
(dp3176
sg70
g3149
sg63
(lp3177
g56
(g77
g58
NtRp3178
(dp3179
g61
(dp3180
g81
g82
ssg70
g3174
sg63
(lp3181
g220
asbag56
(g77
g58
NtRp3182
(dp3183
g61
(dp3184
g88
g89
ssg70
g3174
sg63
(lp3185
S':'
asbag56
(g77
g58
NtRp3186
(dp3187
g61
(dp3188
sg70
g3174
sg63
(lp3189
g56
(g57
g58
NtRp3190
(dp3191
g61
(dp3192
g69
I5
ssg70
g3186
sg63
(lp3193
g56
(g65
g58
NtRp3194
(dp3195
g61
(dp3196
g69
I4
ssg70
Nsg63
(lp3197
g56
(g72
g58
NtRp3198
(dp3199
g61
(dp3200
sg70
g3194
sg63
(lp3201
g56
(g77
g58
NtRp3202
(dp3203
g61
(dp3204
g81
g82
ssg70
g3198
sg63
(lp3205
S'session_id_admin'
p3206
asbag56
(g77
g58
NtRp3207
(dp3208
g61
(dp3209
g88
g89
ssg70
g3198
sg63
(lp3210
S':'
asbag56
(g77
g58
NtRp3211
(dp3212
g61
(dp3213
sg70
g3198
sg63
(lp3214
g56
(g57
g58
NtRp3215
(dp3216
g61
(dp3217
g69
I4
ssg70
g3211
sg63
(lp3218
g56
(g65
g58
NtRp3219
(dp3220
g61
(dp3221
g69
I3
ssg70
Nsg63
(lp3222
g56
(g72
g58
NtRp3223
(dp3224
g61
(dp3225
sg70
g3219
sg63
(lp3226
g56
(g77
g58
NtRp3227
(dp3228
g61
(dp3229
g81
g82
ssg70
g3223
sg63
(lp3230
g270
asbag56
(g77
g58
NtRp3231
(dp3232
g61
(dp3233
g88
g89
ssg70
g3223
sg63
(lp3234
S':'
asbag56
(g77
g58
NtRp3235
(dp3236
g61
(dp3237
sg70
g3223
sg63
(lp3238
g56
(g57
g58
NtRp3239
(dp3240
g61
(dp3241
g69
I3
ssg70
g3235
sg63
(lp3242
S''
asbasbasbag56
(g72
g58
NtRp3243
(dp3244
g61
(dp3245
sg70
g3219
sg63
(lp3246
g56
(g77
g58
NtRp3247
(dp3248
g61
(dp3249
g81
g82
ssg70
g3243
sg63
(lp3250
g291
asbag56
(g77
g58
NtRp3251
(dp3252
g61
(dp3253
g88
g89
ssg70
g3243
sg63
(lp3254
S':'
asbag56
(g77
g58
NtRp3255
(dp3256
g61
(dp3257
sg70
g3243
sg63
(lp3258
g56
(g57
g58
NtRp3259
(dp3260
g61
(dp3261
g69
I3
ssg70
g3255
sg63
(lp3262
S''
asbasbasbag56
(g72
g58
NtRp3263
(dp3264
g61
(dp3265
sg70
g3219
sg63
(lp3266
g56
(g77
g58
NtRp3267
(dp3268
g61
(dp3269
g81
g82
ssg70
g3263
sg63
(lp3270
g312
asbag56
(g77
g58
NtRp3271
(dp3272
g61
(dp3273
g88
g89
ssg70
g3263
sg63
(lp3274
S':'
asbag56
(g77
g58
NtRp3275
(dp3276
g61
(dp3277
sg70
g3263
sg63
(lp3278
g56
(g57
g58
NtRp3279
(dp3280
g61
(dp3281
g69
I3
ssg70
g3275
sg63
(lp3282
S''
asbasbasbag56
(g72
g58
NtRp3283
(dp3284
g61
(dp3285
sg70
g3219
sg63
(lp3286
g56
(g77
g58
NtRp3287
(dp3288
g61
(dp3289
g81
g82
ssg70
g3283
sg63
(lp3290
g333
asbag56
(g77
g58
NtRp3291
(dp3292
g61
(dp3293
g88
g89
ssg70
g3283
sg63
(lp3294
S':'
asbag56
(g77
g58
NtRp3295
(dp3296
g61
(dp3297
sg70
g3283
sg63
(lp3298
g56
(g57
g58
NtRp3299
(dp3300
g61
(dp3301
g69
I3
ssg70
g3295
sg63
(lp3302
S''
asbasbasbag56
(g72
g58
NtRp3303
(dp3304
g61
(dp3305
sg70
g3219
sg63
(lp3306
g56
(g77
g58
NtRp3307
(dp3308
g61
(dp3309
g81
g82
ssg70
g3303
sg63
(lp3310
g354
asbag56
(g77
g58
NtRp3311
(dp3312
g61
(dp3313
g88
g89
ssg70
g3303
sg63
(lp3314
S':'
asbag56
(g77
g58
NtRp3315
(dp3316
g61
(dp3317
sg70
g3303
sg63
(lp3318
g56
(g57
g58
NtRp3319
(dp3320
g61
(dp3321
g69
I3
ssg70
g3315
sg63
(lp3322
S''
asbasbasbag56
(g72
g58
NtRp3323
(dp3324
g61
(dp3325
sg70
g3219
sg63
(lp3326
g56
(g77
g58
NtRp3327
(dp3328
g61
(dp3329
g81
g82
ssg70
g3323
sg63
(lp3330
g375
asbag56
(g77
g58
NtRp3331
(dp3332
g61
(dp3333
g88
g89
ssg70
g3323
sg63
(lp3334
S':'
asbag56
(g77
g58
NtRp3335
(dp3336
g61
(dp3337
sg70
g3323
sg63
(lp3338
g56
(g57
g58
NtRp3339
(dp3340
g61
(dp3341
g69
I3
ssg70
g3335
sg63
(lp3342
S'/'
asbasbasbag56
(g72
g58
NtRp3343
(dp3344
g61
(dp3345
sg70
g3219
sg63
(lp3346
g56
(g77
g58
NtRp3347
(dp3348
g61
(dp3349
g81
g82
ssg70
g3343
sg63
(lp3350
g396
asbag56
(g77
g58
NtRp3351
(dp3352
g61
(dp3353
g88
g89
ssg70
g3343
sg63
(lp3354
S':'
asbag56
(g77
g58
NtRp3355
(dp3356
g61
(dp3357
sg70
g3343
sg63
(lp3358
g56
(g57
g58
NtRp3359
(dp3360
g61
(dp3361
g69
I3
ssg70
g3355
sg63
(lp3362
S''
asbasbasbag56
(g72
g58
NtRp3363
(dp3364
g61
(dp3365
sg70
g3219
sg63
(lp3366
g56
(g77
g58
NtRp3367
(dp3368
g61
(dp3369
g81
g82
ssg70
g3363
sg63
(lp3370
g417
asbag56
(g77
g58
NtRp3371
(dp3372
g61
(dp3373
g88
g89
ssg70
g3363
sg63
(lp3374
S':'
asbag56
(g77
g58
NtRp3375
(dp3376
g61
(dp3377
sg70
g3363
sg63
(lp3378
g56
(g57
g58
NtRp3379
(dp3380
g61
(dp3381
g69
I3
ssg70
g3375
sg63
(lp3382
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp3383
(dp3384
g61
(dp3385
sg70
g3149
sg63
(lp3386
g56
(g77
g58
NtRp3387
(dp3388
g61
(dp3389
g81
g82
ssg70
g3383
sg63
(lp3390
S'files'
p3391
asbag56
(g77
g58
NtRp3392
(dp3393
g61
(dp3394
g88
g89
ssg70
g3383
sg63
(lp3395
S':'
asbag56
(g77
g58
NtRp3396
(dp3397
g61
(dp3398
sg70
g3383
sg63
(lp3399
g56
(g57
g58
NtRp3400
(dp3401
g61
(dp3402
g69
I5
ssg70
g3396
sg63
(lp3403
g56
(g65
g58
NtRp3404
(dp3405
g61
(dp3406
g69
I4
ssg70
Nsg63
(lp3407
g56
(g72
g58
NtRp3408
(dp3409
g61
(dp3410
sg70
g3404
sg63
(lp3411
g56
(g77
g58
NtRp3412
(dp3413
g61
(dp3414
sg70
g3408
sg63
(lp3415
g56
(g57
g58
NtRp3416
(dp3417
g61
(dp3418
g69
I4
ssg70
g3412
sg63
(lp3419
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3420
asbasbasbag56
(g72
g58
NtRp3421
(dp3422
g61
(dp3423
sg70
g3404
sg63
(lp3424
g56
(g77
g58
NtRp3425
(dp3426
g61
(dp3427
sg70
g3421
sg63
(lp3428
g56
(g57
g58
NtRp3429
(dp3430
g61
(dp3431
g69
I4
ssg70
g3425
sg63
(lp3432
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3433
asbasbasbag56
(g72
g58
NtRp3434
(dp3435
g61
(dp3436
sg70
g3404
sg63
(lp3437
g56
(g77
g58
NtRp3438
(dp3439
g61
(dp3440
sg70
g3434
sg63
(lp3441
g56
(g57
g58
NtRp3442
(dp3443
g61
(dp3444
g69
I4
ssg70
g3438
sg63
(lp3445
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3446
asbasbasbag56
(g72
g58
NtRp3447
(dp3448
g61
(dp3449
sg70
g3404
sg63
(lp3450
g56
(g77
g58
NtRp3451
(dp3452
g61
(dp3453
sg70
g3447
sg63
(lp3454
g56
(g57
g58
NtRp3455
(dp3456
g61
(dp3457
g69
I4
ssg70
g3451
sg63
(lp3458
S'/admin/static/plugin_multiselect/start.js'
p3459
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3460
(dp3461
g61
(dp3462
sg70
g3149
sg63
(lp3463
g56
(g77
g58
NtRp3464
(dp3465
g61
(dp3466
g81
g82
ssg70
g3460
sg63
(lp3467
S'flash'
p3468
asbag56
(g77
g58
NtRp3469
(dp3470
g61
(dp3471
g88
g89
ssg70
g3460
sg63
(lp3472
S':'
asbag56
(g77
g58
NtRp3473
(dp3474
g61
(dp3475
sg70
g3460
sg63
(lp3476
g56
(g57
g58
NtRp3477
(dp3478
g61
(dp3479
g69
I5
ssg70
g3473
sg63
(lp3480
S''
asbasbasbag56
(g72
g58
NtRp3481
(dp3482
g61
(dp3483
sg70
g3149
sg63
(lp3484
g56
(g77
g58
NtRp3485
(dp3486
g61
(dp3487
g81
g82
ssg70
g3481
sg63
(lp3488
S'generic_patterns'
p3489
asbag56
(g77
g58
NtRp3490
(dp3491
g61
(dp3492
g88
g89
ssg70
g3481
sg63
(lp3493
S':'
asbag56
(g77
g58
NtRp3494
(dp3495
g61
(dp3496
sg70
g3481
sg63
(lp3497
g56
(g57
g58
NtRp3498
(dp3499
g61
(dp3500
g69
I5
ssg70
g3494
sg63
(lp3501
g56
(g65
g58
NtRp3502
(dp3503
g61
(dp3504
g69
I4
ssg70
Nsg63
(lp3505
sbasbasbasbag56
(g72
g58
NtRp3506
(dp3507
g61
(dp3508
sg70
g3149
sg63
(lp3509
g56
(g77
g58
NtRp3510
(dp3511
g61
(dp3512
g81
g82
ssg70
g3506
sg63
(lp3513
S'headers'
p3514
asbag56
(g77
g58
NtRp3515
(dp3516
g61
(dp3517
g88
g89
ssg70
g3506
sg63
(lp3518
S':'
asbag56
(g77
g58
NtRp3519
(dp3520
g61
(dp3521
sg70
g3506
sg63
(lp3522
g56
(g57
g58
NtRp3523
(dp3524
g61
(dp3525
g69
I5
ssg70
g3519
sg63
(lp3526
g56
(g65
g58
NtRp3527
(dp3528
g61
(dp3529
g69
I4
ssg70
Nsg63
(lp3530
g56
(g72
g58
NtRp3531
(dp3532
g61
(dp3533
sg70
g3527
sg63
(lp3534
g56
(g77
g58
NtRp3535
(dp3536
g61
(dp3537
g81
g82
ssg70
g3531
sg63
(lp3538
S'Cache-Control'
p3539
asbag56
(g77
g58
NtRp3540
(dp3541
g61
(dp3542
g88
g89
ssg70
g3531
sg63
(lp3543
S':'
asbag56
(g77
g58
NtRp3544
(dp3545
g61
(dp3546
sg70
g3531
sg63
(lp3547
g56
(g57
g58
NtRp3548
(dp3549
g61
(dp3550
g69
I4
ssg70
g3544
sg63
(lp3551
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3552
asbasbasbag56
(g72
g58
NtRp3553
(dp3554
g61
(dp3555
sg70
g3527
sg63
(lp3556
g56
(g77
g58
NtRp3557
(dp3558
g61
(dp3559
g81
g82
ssg70
g3553
sg63
(lp3560
S'Content-Type'
p3561
asbag56
(g77
g58
NtRp3562
(dp3563
g61
(dp3564
g88
g89
ssg70
g3553
sg63
(lp3565
S':'
asbag56
(g77
g58
NtRp3566
(dp3567
g61
(dp3568
sg70
g3553
sg63
(lp3569
g56
(g57
g58
NtRp3570
(dp3571
g61
(dp3572
g69
I4
ssg70
g3566
sg63
(lp3573
S'text/html; charset=utf-8'
p3574
asbasbasbag56
(g72
g58
NtRp3575
(dp3576
g61
(dp3577
sg70
g3527
sg63
(lp3578
g56
(g77
g58
NtRp3579
(dp3580
g61
(dp3581
g81
g82
ssg70
g3575
sg63
(lp3582
S'Expires'
p3583
asbag56
(g77
g58
NtRp3584
(dp3585
g61
(dp3586
g88
g89
ssg70
g3575
sg63
(lp3587
S':'
asbag56
(g77
g58
NtRp3588
(dp3589
g61
(dp3590
sg70
g3575
sg63
(lp3591
g56
(g57
g58
NtRp3592
(dp3593
g61
(dp3594
g69
I4
ssg70
g3588
sg63
(lp3595
S'Fri, 02 Mar 2012 10:21:13 GMT'
p3596
asbasbasbag56
(g72
g58
NtRp3597
(dp3598
g61
(dp3599
sg70
g3527
sg63
(lp3600
g56
(g77
g58
NtRp3601
(dp3602
g61
(dp3603
g81
g82
ssg70
g3597
sg63
(lp3604
S'Pragma'
p3605
asbag56
(g77
g58
NtRp3606
(dp3607
g61
(dp3608
g88
g89
ssg70
g3597
sg63
(lp3609
S':'
asbag56
(g77
g58
NtRp3610
(dp3611
g61
(dp3612
sg70
g3597
sg63
(lp3613
g56
(g57
g58
NtRp3614
(dp3615
g61
(dp3616
g69
I4
ssg70
g3610
sg63
(lp3617
S'no-cache'
p3618
asbasbasbag56
(g72
g58
NtRp3619
(dp3620
g61
(dp3621
sg70
g3527
sg63
(lp3622
g56
(g77
g58
NtRp3623
(dp3624
g61
(dp3625
g81
g82
ssg70
g3619
sg63
(lp3626
S'X-Powered-By'
p3627
asbag56
(g77
g58
NtRp3628
(dp3629
g61
(dp3630
g88
g89
ssg70
g3619
sg63
(lp3631
S':'
asbag56
(g77
g58
NtRp3632
(dp3633
g61
(dp3634
sg70
g3619
sg63
(lp3635
g56
(g57
g58
NtRp3636
(dp3637
g61
(dp3638
g69
I4
ssg70
g3632
sg63
(lp3639
S'web2py'
p3640
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3641
(dp3642
g61
(dp3643
sg70
g3149
sg63
(lp3644
g56
(g77
g58
NtRp3645
(dp3646
g61
(dp3647
g81
g82
ssg70
g3641
sg63
(lp3648
S'menu'
p3649
asbag56
(g77
g58
NtRp3650
(dp3651
g61
(dp3652
g88
g89
ssg70
g3641
sg63
(lp3653
S':'
asbag56
(g77
g58
NtRp3654
(dp3655
g61
(dp3656
sg70
g3641
sg63
(lp3657
g56
(g57
g58
NtRp3658
(dp3659
g61
(dp3660
g69
I5
ssg70
g3654
sg63
(lp3661
g56
(g65
g58
NtRp3662
(dp3663
g61
(dp3664
g69
I4
ssg70
Nsg63
(lp3665
g56
(g72
g58
NtRp3666
(dp3667
g61
(dp3668
sg70
g3662
sg63
(lp3669
g56
(g77
g58
NtRp3670
(dp3671
g61
(dp3672
sg70
g3666
sg63
(lp3673
g56
(g57
g58
NtRp3674
(dp3675
g61
(dp3676
g69
I4
ssg70
g3670
sg63
(lp3677
g56
(g65
g58
NtRp3678
(dp3679
g61
(dp3680
g69
I3
ssg70
Nsg63
(lp3681
g56
(g72
g58
NtRp3682
(dp3683
g61
(dp3684
sg70
g3678
sg63
(lp3685
g56
(g77
g58
NtRp3686
(dp3687
g61
(dp3688
sg70
g3682
sg63
(lp3689
g56
(g57
g58
NtRp3690
(dp3691
g61
(dp3692
g69
I3
ssg70
g3686
sg63
(lp3693
cgluon.languages
lazyT_unpickle
p3694
(S't\x05\x00\x00\x00Seite'
tRp3695
asbasbasbag56
(g72
g58
NtRp3696
(dp3697
g61
(dp3698
sg70
g3678
sg63
(lp3699
g56
(g77
g58
NtRp3700
(dp3701
g61
(dp3702
sg70
g3696
sg63
(lp3703
g56
(g57
g58
NtRp3704
(dp3705
g61
(dp3706
g69
I3
ssg70
g3700
sg63
(lp3707
g795
asbasbasbag56
(g72
g58
NtRp3708
(dp3709
g61
(dp3710
sg70
g3678
sg63
(lp3711
g56
(g77
g58
NtRp3712
(dp3713
g61
(dp3714
sg70
g3708
sg63
(lp3715
g56
(g57
g58
NtRp3716
(dp3717
g61
(dp3718
g69
I3
ssg70
g3712
sg63
(lp3719
S'/admin/default/site'
p3720
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3721
(dp3722
g61
(dp3723
sg70
g3662
sg63
(lp3724
g56
(g77
g58
NtRp3725
(dp3726
g61
(dp3727
sg70
g3721
sg63
(lp3728
g56
(g57
g58
NtRp3729
(dp3730
g61
(dp3731
g69
I4
ssg70
g3725
sg63
(lp3732
g56
(g65
g58
NtRp3733
(dp3734
g61
(dp3735
g69
I3
ssg70
Nsg63
(lp3736
g56
(g72
g58
NtRp3737
(dp3738
g61
(dp3739
sg70
g3733
sg63
(lp3740
g56
(g77
g58
NtRp3741
(dp3742
g61
(dp3743
sg70
g3737
sg63
(lp3744
g56
(g57
g58
NtRp3745
(dp3746
g61
(dp3747
g69
I3
ssg70
g3741
sg63
(lp3748
g3694
(S't\x08\x00\x00\x00abmelden'
tRp3749
asbasbasbag56
(g72
g58
NtRp3750
(dp3751
g61
(dp3752
sg70
g3733
sg63
(lp3753
g56
(g77
g58
NtRp3754
(dp3755
g61
(dp3756
sg70
g3750
sg63
(lp3757
g56
(g57
g58
NtRp3758
(dp3759
g61
(dp3760
g69
I3
ssg70
g3754
sg63
(lp3761
g795
asbasbasbag56
(g72
g58
NtRp3762
(dp3763
g61
(dp3764
sg70
g3733
sg63
(lp3765
g56
(g77
g58
NtRp3766
(dp3767
g61
(dp3768
sg70
g3762
sg63
(lp3769
g56
(g57
g58
NtRp3770
(dp3771
g61
(dp3772
g69
I3
ssg70
g3766
sg63
(lp3773
S'/admin/default/logout'
p3774
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3775
(dp3776
g61
(dp3777
sg70
g3662
sg63
(lp3778
g56
(g77
g58
NtRp3779
(dp3780
g61
(dp3781
sg70
g3775
sg63
(lp3782
g56
(g57
g58
NtRp3783
(dp3784
g61
(dp3785
g69
I4
ssg70
g3779
sg63
(lp3786
g56
(g65
g58
NtRp3787
(dp3788
g61
(dp3789
g69
I3
ssg70
Nsg63
(lp3790
g56
(g72
g58
NtRp3791
(dp3792
g61
(dp3793
sg70
g3787
sg63
(lp3794
g56
(g77
g58
NtRp3795
(dp3796
g61
(dp3797
sg70
g3791
sg63
(lp3798
g56
(g57
g58
NtRp3799
(dp3800
g61
(dp3801
g69
I3
ssg70
g3795
sg63
(lp3802
g3694
(S't\x05\x00\x00\x00Hilfe'
tRp3803
asbasbasbag56
(g72
g58
NtRp3804
(dp3805
g61
(dp3806
sg70
g3787
sg63
(lp3807
g56
(g77
g58
NtRp3808
(dp3809
g61
(dp3810
sg70
g3804
sg63
(lp3811
g56
(g57
g58
NtRp3812
(dp3813
g61
(dp3814
g69
I3
ssg70
g3808
sg63
(lp3815
g795
asbasbasbag56
(g72
g58
NtRp3816
(dp3817
g61
(dp3818
sg70
g3787
sg63
(lp3819
g56
(g77
g58
NtRp3820
(dp3821
g61
(dp3822
sg70
g3816
sg63
(lp3823
g56
(g57
g58
NtRp3824
(dp3825
g61
(dp3826
g69
I3
ssg70
g3820
sg63
(lp3827
S'/examples/default/index'
p3828
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp3829
(dp3830
g61
(dp3831
sg70
g3149
sg63
(lp3832
g56
(g77
g58
NtRp3833
(dp3834
g61
(dp3835
g81
g82
ssg70
g3829
sg63
(lp3836
S'meta'
p3837
asbag56
(g77
g58
NtRp3838
(dp3839
g61
(dp3840
g88
g89
ssg70
g3829
sg63
(lp3841
S':'
asbag56
(g77
g58
NtRp3842
(dp3843
g61
(dp3844
sg70
g3829
sg63
(lp3845
g56
(g57
g58
NtRp3846
(dp3847
g61
(dp3848
g69
I5
ssg70
g3842
sg63
(lp3849
g56
(g65
g58
NtRp3850
(dp3851
g61
(dp3852
g69
I4
ssg70
Nsg63
(lp3853
sbasbasbasbag56
(g72
g58
NtRp3854
(dp3855
g61
(dp3856
sg70
g3149
sg63
(lp3857
g56
(g77
g58
NtRp3858
(dp3859
g61
(dp3860
g81
g82
ssg70
g3854
sg63
(lp3861
S'postprocessing'
p3862
asbag56
(g77
g58
NtRp3863
(dp3864
g61
(dp3865
g88
g89
ssg70
g3854
sg63
(lp3866
S':'
asbag56
(g77
g58
NtRp3867
(dp3868
g61
(dp3869
sg70
g3854
sg63
(lp3870
g56
(g57
g58
NtRp3871
(dp3872
g61
(dp3873
g69
I5
ssg70
g3867
sg63
(lp3874
g56
(g65
g58
NtRp3875
(dp3876
g61
(dp3877
g69
I4
ssg70
Nsg63
(lp3878
sbasbasbasbag56
(g72
g58
NtRp3879
(dp3880
g61
(dp3881
sg70
g3149
sg63
(lp3882
g56
(g77
g58
NtRp3883
(dp3884
g61
(dp3885
g81
g82
ssg70
g3879
sg63
(lp3886
S'session_file'
p3887
asbag56
(g77
g58
NtRp3888
(dp3889
g61
(dp3890
g88
g89
ssg70
g3879
sg63
(lp3891
S':'
asbag56
(g77
g58
NtRp3892
(dp3893
g61
(dp3894
sg70
g3879
sg63
(lp3895
g56
(g57
g58
NtRp3896
(dp3897
g61
(dp3898
g69
I5
ssg70
g3892
sg63
(lp3899
S"<open file '/home/jogi/Programmieren/web2py/applications/admin/sessions/127.0.0.1-86d5f51f-3a26-44b8-a9e1-2cbc04eace59', mode 'rb+' at 0x336e810>"
p3900
asbasbasbag56
(g72
g58
NtRp3901
(dp3902
g61
(dp3903
sg70
g3149
sg63
(lp3904
g56
(g77
g58
NtRp3905
(dp3906
g61
(dp3907
g81
g82
ssg70
g3901
sg63
(lp3908
S'session_filename'
p3909
asbag56
(g77
g58
NtRp3910
(dp3911
g61
(dp3912
g88
g89
ssg70
g3901
sg63
(lp3913
S':'
asbag56
(g77
g58
NtRp3914
(dp3915
g61
(dp3916
sg70
g3901
sg63
(lp3917
g56
(g57
g58
NtRp3918
(dp3919
g61
(dp3920
g69
I5
ssg70
g3914
sg63
(lp3921
S'/home/jogi/Programmieren/web2py/applications/admin/sessions/127.0.0.1-86d5f51f-3a26-44b8-a9e1-2cbc04eace59'
p3922
asbasbasbag56
(g72
g58
NtRp3923
(dp3924
g61
(dp3925
sg70
g3149
sg63
(lp3926
g56
(g77
g58
NtRp3927
(dp3928
g61
(dp3929
g81
g82
ssg70
g3923
sg63
(lp3930
S'session_id'
p3931
asbag56
(g77
g58
NtRp3932
(dp3933
g61
(dp3934
g88
g89
ssg70
g3923
sg63
(lp3935
S':'
asbag56
(g77
g58
NtRp3936
(dp3937
g61
(dp3938
sg70
g3923
sg63
(lp3939
g56
(g57
g58
NtRp3940
(dp3941
g61
(dp3942
g69
I5
ssg70
g3936
sg63
(lp3943
S'127.0.0.1-86d5f51f-3a26-44b8-a9e1-2cbc04eace59'
p3944
asbasbasbag56
(g72
g58
NtRp3945
(dp3946
g61
(dp3947
sg70
g3149
sg63
(lp3948
g56
(g77
g58
NtRp3949
(dp3950
g61
(dp3951
g81
g82
ssg70
g3945
sg63
(lp3952
S'session_id_name'
p3953
asbag56
(g77
g58
NtRp3954
(dp3955
g61
(dp3956
g88
g89
ssg70
g3945
sg63
(lp3957
S':'
asbag56
(g77
g58
NtRp3958
(dp3959
g61
(dp3960
sg70
g3945
sg63
(lp3961
g56
(g57
g58
NtRp3962
(dp3963
g61
(dp3964
g69
I5
ssg70
g3958
sg63
(lp3965
g3206
asbasbasbag56
(g72
g58
NtRp3966
(dp3967
g61
(dp3968
sg70
g3149
sg63
(lp3969
g56
(g77
g58
NtRp3970
(dp3971
g61
(dp3972
g81
g82
ssg70
g3966
sg63
(lp3973
S'session_locked'
p3974
asbag56
(g77
g58
NtRp3975
(dp3976
g61
(dp3977
g88
g89
ssg70
g3966
sg63
(lp3978
S':'
asbag56
(g77
g58
NtRp3979
(dp3980
g61
(dp3981
sg70
g3966
sg63
(lp3982
g56
(g57
g58
NtRp3983
(dp3984
g61
(dp3985
g69
I5
ssg70
g3979
sg63
(lp3986
g795
asbasbasbag56
(g72
g58
NtRp3987
(dp3988
g61
(dp3989
sg70
g3149
sg63
(lp3990
g56
(g77
g58
NtRp3991
(dp3992
g61
(dp3993
g81
g82
ssg70
g3987
sg63
(lp3994
S'session_new'
p3995
asbag56
(g77
g58
NtRp3996
(dp3997
g61
(dp3998
g88
g89
ssg70
g3987
sg63
(lp3999
S':'
asbag56
(g77
g58
NtRp4000
(dp4001
g61
(dp4002
sg70
g3987
sg63
(lp4003
g56
(g57
g58
NtRp4004
(dp4005
g61
(dp4006
g69
I5
ssg70
g4000
sg63
(lp4007
g795
asbasbasbag56
(g72
g58
NtRp4008
(dp4009
g61
(dp4010
sg70
g3149
sg63
(lp4011
g56
(g77
g58
NtRp4012
(dp4013
g61
(dp4014
g81
g82
ssg70
g4008
sg63
(lp4015
S'status'
p4016
asbag56
(g77
g58
NtRp4017
(dp4018
g61
(dp4019
g88
g89
ssg70
g4008
sg63
(lp4020
S':'
asbag56
(g77
g58
NtRp4021
(dp4022
g61
(dp4023
sg70
g4008
sg63
(lp4024
g56
(g57
g58
NtRp4025
(dp4026
g61
(dp4027
g69
I5
ssg70
g4021
sg63
(lp4028
S'200'
p4029
asbasbasbag56
(g72
g58
NtRp4030
(dp4031
g61
(dp4032
sg70
g3149
sg63
(lp4033
g56
(g77
g58
NtRp4034
(dp4035
g61
(dp4036
g81
g82
ssg70
g4030
sg63
(lp4037
S'subtitle'
p4038
asbag56
(g77
g58
NtRp4039
(dp4040
g61
(dp4041
g88
g89
ssg70
g4030
sg63
(lp4042
S':'
asbag56
(g77
g58
NtRp4043
(dp4044
g61
(dp4045
sg70
g4030
sg63
(lp4046
g56
(g57
g58
NtRp4047
(dp4048
g61
(dp4049
g69
I5
ssg70
g4043
sg63
(lp4050
S'admin'
p4051
asbasbasbag56
(g72
g58
NtRp4052
(dp4053
g61
(dp4054
sg70
g3149
sg63
(lp4055
g56
(g77
g58
NtRp4056
(dp4057
g61
(dp4058
g81
g82
ssg70
g4052
sg63
(lp4059
S'title'
p4060
asbag56
(g77
g58
NtRp4061
(dp4062
g61
(dp4063
g88
g89
ssg70
g4052
sg63
(lp4064
S':'
asbag56
(g77
g58
NtRp4065
(dp4066
g61
(dp4067
sg70
g4052
sg63
(lp4068
g56
(g57
g58
NtRp4069
(dp4070
g61
(dp4071
g69
I5
ssg70
g4065
sg63
(lp4072
S'check_version '
p4073
asbasbasbag56
(g72
g58
NtRp4074
(dp4075
g61
(dp4076
sg70
g3149
sg63
(lp4077
g56
(g77
g58
NtRp4078
(dp4079
g61
(dp4080
g81
g82
ssg70
g4074
sg63
(lp4081
g2222
asbag56
(g77
g58
NtRp4082
(dp4083
g61
(dp4084
g88
g89
ssg70
g4074
sg63
(lp4085
S':'
asbag56
(g77
g58
NtRp4086
(dp4087
g61
(dp4088
sg70
g4074
sg63
(lp4089
g56
(g57
g58
NtRp4090
(dp4091
g61
(dp4092
g69
I5
ssg70
g4086
sg63
(lp4093
g2235
asbasbasbag56
(g72
g58
NtRp4094
(dp4095
g61
(dp4096
sg70
g3149
sg63
(lp4097
g56
(g77
g58
NtRp4098
(dp4099
g61
(dp4100
g81
g82
ssg70
g4094
sg63
(lp4101
S'view'
p4102
asbag56
(g77
g58
NtRp4103
(dp4104
g61
(dp4105
g88
g89
ssg70
g4094
sg63
(lp4106
S':'
asbag56
(g77
g58
NtRp4107
(dp4108
g61
(dp4109
sg70
g4094
sg63
(lp4110
g56
(g57
g58
NtRp4111
(dp4112
g61
(dp4113
g69
I5
ssg70
g4107
sg63
(lp4114
S'default/check_version.html'
p4115
asbasbasbasbasbsS'locals'
p4116
(dp4117
S'version_number'
p4118
S"(1, 99, 5, datetime.datetime(2012, 3, 1, 21, 22, 41), 'stable')"
p4119
sS'new_version'
p4120
g99
sssS'traceback'
p4121
S'Traceback (most recent call last):\n  File "/home/jogi/Programmieren/web2py/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py", line 1225, in <module>\n  File "/home/jogi/Programmieren/web2py/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jogi/Programmieren/web2py/applications/admin/controllers/default.py", line 105, in check_version\n    + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\nTypeError: not all arguments converted during string formatting\n'
p4122
s.